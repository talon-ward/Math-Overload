
-- phpMyAdmin SQL Dump
-- version 3.5.2.2
-- http://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Jun 15, 2014 at 05:02 PM
-- Server version: 5.1.61
-- PHP Version: 5.2.17

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `u774937552_modb`
--

-- --------------------------------------------------------

--
-- Table structure for table `conceptnotes`
--

CREATE TABLE IF NOT EXISTS `conceptnotes` (
  `conceptID` int(10) unsigned NOT NULL,
  `noteID` int(10) unsigned NOT NULL,
  PRIMARY KEY (`conceptID`),
  KEY `noteID` (`noteID`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `conceptnotes`
--

INSERT INTO `conceptnotes` (`conceptID`, `noteID`) VALUES
(1040101, 1040101),
(1040103, 1040101),
(1040105, 1040101),
(1040108, 1040101),
(1040102, 1040102),
(1040104, 1040102),
(1040106, 1040102),
(1040107, 1040102),
(1040109, 1040102),
(1040110, 1040102),
(1040111, 1040102),
(1040112, 1040103),
(1040113, 1040103),
(1040114, 1040103),
(1040115, 1040104),
(1040116, 1040104),
(1040117, 1040104),
(1040118, 1040104),
(1040119, 1040104),
(1040120, 1040104),
(1040121, 1040104),
(1040122, 1040104),
(1010101, 1010101),
(1010102, 1010101),
(1010103, 1010101),
(1010104, 1010101),
(1010105, 1010101),
(1010106, 1010102),
(1010107, 1010102),
(1010108, 1010102),
(1010109, 1010102),
(1010110, 1010102),
(1010111, 1010102),
(1010112, 1010102),
(1010113, 1010102);

-- --------------------------------------------------------

--
-- Table structure for table `conceptprereqs`
--

CREATE TABLE IF NOT EXISTS `conceptprereqs` (
  `conceptID` int(10) unsigned NOT NULL,
  `prereqID` int(10) unsigned NOT NULL,
  KEY `prereqID` (`prereqID`),
  KEY `conceptID` (`conceptID`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `conceptprereqs`
--

INSERT INTO `conceptprereqs` (`conceptID`, `prereqID`) VALUES
(1040102, 1040101),
(1040104, 1040103),
(1040106, 1040105),
(1040107, 1040102),
(1040107, 1040104),
(1040107, 1040106),
(1040109, 1040107),
(1040109, 1040106),
(1040110, 1040107),
(1040111, 1040107),
(1040112, 1040109),
(1040112, 1040111),
(1040112, 1040110),
(1040113, 1040112),
(1040114, 1040112),
(1040115, 1040107),
(1040117, 1040115),
(1040117, 1040116),
(1040118, 1040112),
(1040118, 1040117),
(1040119, 1040118),
(1040120, 1040119),
(1040121, 1040120),
(1040122, 1040121),
(1010106, 1010101),
(1010106, 1010102),
(1010106, 1010103),
(1010106, 1010104),
(1010107, 1010106),
(1010108, 1010106),
(1010109, 1010106),
(1010110, 1010106),
(1010111, 1010106),
(1010112, 1010106),
(1010113, 1010106);

-- --------------------------------------------------------

--
-- Table structure for table `courseconcepts`
--

CREATE TABLE IF NOT EXISTS `courseconcepts` (
  `courseID` int(10) unsigned NOT NULL,
  `conceptID` int(10) unsigned NOT NULL,
  KEY `courseID` (`courseID`,`conceptID`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `courseconcepts`
--

INSERT INTO `courseconcepts` (`courseID`, `conceptID`) VALUES
(1, 1010101),
(1, 1010102),
(1, 1010103),
(1, 1010104),
(1, 1010105),
(1, 1010106),
(1, 1010107),
(1, 1010108),
(1, 1010109),
(1, 1010110),
(1, 1010111),
(1, 1010112),
(1, 1010113),
(1, 1040101),
(1, 1040102),
(1, 1040103),
(1, 1040104),
(1, 1040105),
(1, 1040106),
(1, 1040107),
(1, 1040108),
(1, 1040109),
(1, 1040110),
(1, 1040111),
(1, 1040112),
(1, 1040113),
(1, 1040114),
(1, 1040115),
(1, 1040116),
(1, 1040117),
(1, 1040118),
(1, 1040119),
(1, 1040120),
(1, 1040121),
(1, 1040122);

-- --------------------------------------------------------

--
-- Table structure for table `courses`
--

CREATE TABLE IF NOT EXISTS `courses` (
  `courseID` int(10) unsigned NOT NULL,
  `courseName` varchar(128) NOT NULL,
  `courseDescription` varchar(512) NOT NULL,
  PRIMARY KEY (`courseID`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `courses`
--

INSERT INTO `courses` (`courseID`, `courseName`, `courseDescription`) VALUES
(1, 'Introductory Functional Analysis', 'Normed vector spaces, linear operators, Baire Category theorem, Banach fixed point theorem, Hahn-Banach theorem and applications, open mapping and closed graph theorem with applications, Hilbert space, Gateaux and Frechet.'),
(2, 'Introductory Analysis', 'Real numbers, sequences and series, continuity, differentiation, Riemann integral, fourier series, multivariate functions, differential forms, Lebesgue integral.'),
(3, 'Introductory Linear Algebra', 'Vector spaces, linear transformations, isomorphism theorems, modules, linear operators, eigenvalues and eigenvectors, inner product spaces, normal operators, bilinear forms, metric spaces, Hilbert spaces, tensor products,  affine geometry, matrix decompositions, umbral calculus.');

-- --------------------------------------------------------

--
-- Table structure for table `eligibleconcepts`
--

CREATE TABLE IF NOT EXISTS `eligibleconcepts` (
  `userID` int(10) unsigned NOT NULL,
  `conceptID` int(10) unsigned NOT NULL,
  KEY `userID` (`userID`,`conceptID`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `eligibleconcepts`
--

INSERT INTO `eligibleconcepts` (`userID`, `conceptID`) VALUES
(4, 1010101),
(4, 1010102),
(4, 1010103),
(4, 1010104),
(4, 1010105),
(4, 1040101),
(4, 1040103),
(4, 1040106),
(4, 1040108),
(11, 1010101),
(11, 1010101),
(11, 1010101),
(11, 1010102),
(11, 1010102),
(11, 1010102),
(11, 1010104),
(11, 1010104),
(11, 1010104),
(11, 1010105),
(11, 1010105),
(11, 1010105),
(11, 1040101),
(11, 1040101),
(11, 1040101),
(11, 1040103),
(11, 1040103),
(11, 1040103),
(11, 1040105),
(11, 1040105),
(11, 1040105),
(11, 1040108),
(11, 1040108),
(11, 1040108),
(11, 1040116),
(11, 1040116),
(11, 1040116),
(13, 1010101),
(13, 1010102),
(13, 1010103),
(13, 1010104),
(13, 1010105),
(13, 1040101),
(13, 1040102),
(13, 1040103),
(13, 1040105),
(13, 1040108),
(13, 1040116),
(14, 1010101),
(14, 1010102),
(14, 1010103),
(14, 1010104),
(14, 1010105),
(14, 1040101),
(14, 1040103),
(14, 1040105),
(14, 1040108),
(14, 1040116),
(15, 1010101),
(15, 1010102),
(15, 1010103),
(15, 1010104),
(15, 1010105),
(15, 1040101),
(15, 1040103),
(15, 1040105),
(15, 1040108),
(15, 1040116);

-- --------------------------------------------------------

--
-- Table structure for table `eligibleexercises`
--

CREATE TABLE IF NOT EXISTS `eligibleexercises` (
  `userID` int(10) unsigned NOT NULL,
  `exerciseID` int(10) unsigned NOT NULL,
  KEY `userID` (`userID`,`exerciseID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `eligibleexercises`
--

INSERT INTO `eligibleexercises` (`userID`, `exerciseID`) VALUES
(11, 1010111),
(11, 1010112),
(11, 1010113),
(14, 1010113);

-- --------------------------------------------------------

--
-- Table structure for table `exerciseprereqs`
--

CREATE TABLE IF NOT EXISTS `exerciseprereqs` (
  `exerciseID` int(10) unsigned NOT NULL,
  `prereqID` int(10) unsigned NOT NULL,
  KEY `exerciseID` (`exerciseID`,`prereqID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `exerciseprereqs`
--

INSERT INTO `exerciseprereqs` (`exerciseID`, `prereqID`) VALUES
(1010101, 1010108),
(1010102, 1010106),
(1010103, 1010106),
(1010104, 1010106),
(1010105, 1010106),
(1010106, 1010111),
(1010107, 1010107),
(1010107, 1010111),
(1010107, 1010113),
(1010108, 1010112),
(1010109, 1010113),
(1010110, 1010106),
(1010111, 1010105),
(1010112, 1010105),
(1010113, 1010103),
(1010114, 1010106),
(1010115, 1010106);

-- --------------------------------------------------------

--
-- Table structure for table `exercises`
--

CREATE TABLE IF NOT EXISTS `exercises` (
  `exerciseID` int(10) unsigned NOT NULL,
  `description` varchar(128) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`exerciseID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `exercises`
--

INSERT INTO `exercises` (`exerciseID`, `description`) VALUES
(1010104, 'Find all metrics on small sets.'),
(1010101, 'Show real line is metric space.'),
(1010102, 'Is this function a metric on the real line?'),
(1010103, 'Verify this metric on the real line.'),
(1010105, 'Find additive and multiplicative constants that keep metrics.'),
(1010106, 'The triangle inequality on a sequence space.'),
(1010107, 'Induced metric on a subset of a sequence space.'),
(1010108, 'Is this a metric on the space of continuous functions?'),
(1010109, 'The discrete metric.'),
(1010110, 'Show that Hamming distance is a metric.'),
(1010111, 'Prove the generalized triangle inequality.'),
(1010112, 'Use the generalized triangle inequality.'),
(1010113, 'Use the triangle inequality.'),
(1010114, 'Show metric definition can use less axioms.'),
(1010115, 'Prove a metric is nonnegative.');

-- --------------------------------------------------------

--
-- Table structure for table `notes`
--

CREATE TABLE IF NOT EXISTS `notes` (
  `noteID` int(10) unsigned NOT NULL,
  `noteName` varchar(128) COLLATE utf8_unicode_ci NOT NULL,
  KEY `noteID` (`noteID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `notes`
--

INSERT INTO `notes` (`noteID`, `noteName`) VALUES
(1010101, 'Distance Function'),
(1010102, 'Metric Space'),
(1010201, 'Metric Space Examples');

-- --------------------------------------------------------

--
-- Table structure for table `openexercises`
--

CREATE TABLE IF NOT EXISTS `openexercises` (
  `userID` int(10) unsigned NOT NULL,
  `exerciseID` int(10) unsigned NOT NULL,
  KEY `userID` (`userID`,`exerciseID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `openexercises`
--

INSERT INTO `openexercises` (`userID`, `exerciseID`) VALUES
(1, 1010104),
(1, 1010105),
(1, 1010106),
(1, 1010107),
(1, 1010108),
(1, 1010109),
(1, 1010110),
(1, 1010111),
(1, 1010112),
(1, 1010113),
(1, 1010114),
(1, 1010115),
(13, 1010113);

-- --------------------------------------------------------

--
-- Table structure for table `questions`
--

CREATE TABLE IF NOT EXISTS `questions` (
  `questionID` int(10) unsigned NOT NULL,
  `conceptID` int(10) unsigned NOT NULL,
  `questionText` varchar(512) NOT NULL,
  `answer` varchar(256) NOT NULL,
  UNIQUE KEY `questionID` (`questionID`),
  KEY `conceptID` (`conceptID`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `questions`
--

INSERT INTO `questions` (`questionID`, `conceptID`, `questionText`, `answer`) VALUES
(1040103, 1040102, '<i>Definition</i>. A <i>partial ordering</i> $\\\\leq$ on a set $A$ satisfies [...], for all $a \\\\in A$.', '$a \\\\leq a$'),
(1040101, 1040101, '<i>Definition</i>. A binary relation $R$ on a set $A$ is <i>reflexive</i> if [...].', '$(a, a) \\\\in R$, for all $a \\\\in A$'),
(1040102, 1040101, '<i>Definition</i>. If $R$ is a binary relation on a set $A$, and $(a, a) \\\\in R$, for all $a \\\\in A$, then $R$ is said to be [...].', 'reflexive'),
(1040104, 1040103, '<i>Definition</i>. If $R$ is a binary relation on a set $A$, $R$ is <i>antisymmetric</i> if [...].', '$(a, b) \\\\in R$ and $(b, a) \\\\in R$ imply $a = b$, for all $a, b \\\\in A$'),
(1040105, 1040103, '<i>Definition</i>. If $R$ is a binary relation on a set $A$, and $(a, b) \\\\in R$ and $(b, a) \\\\in R$ imply $a = b$, for all $a, b \\\\in A$, then $R$ is said to be [...].', 'antisymmetric'),
(1040108, 1040105, '<i>Definition</i>. If $R$ is a binary relation on a set $A$, then $R$ is <i>transitive</i> if [...].', '$(a, b) \\\\in R$ and $(b, c) \\\\in R$ imply $(a, c) \\\\in R$, for all $a, b, c \\\\in A$'),
(1040109, 1040105, '<i>Definition</i>. If $R$ is a binary relation on a set $A$, and $(a, b) \\\\in R$ and $(b, c) \\\\in R$ imply $(a, c) \\\\in R$, for all $a, b, c \\\\in R$, then $R$ is said to be [...].', 'transitive'),
(1040110, 1040106, '<i>Definition</i>. If $\\\\leq$ is a <i>partial ordering</i> on a set $A$, then $a \\\\leq b$ and $b \\\\leq c$ imply [...].', '$a \\\\leq c$, for all $a, b, c \\\\in A$'),
(1040106, 1040104, '<i>Definition</i>. If $\\\\leq$ is a <i>partial order</i> on a set $A$, then $a \\\\leq b$ and $b \\\\leq a$ imply [...].', '$a = b$, for all $a, b \\\\in A$'),
(1040107, 1040104, '<i>Definition</i>. If $\\\\leq$ is a <i>partial order</i> on a set $A$, then [...] and [...] imply $a = b$, for all $a, b \\\\in A$.', '$a \\\\leq b$, $b \\\\leq a$'),
(1040111, 1040106, '<i>Definition</i>. If $\\\\leq$ is a <i>partial ordering</i> on a set $A$, then [...] and [...] imply $a \\\\leq c$, for all $a, b, c \\\\in A$.', '$a \\\\leq b$, $b \\\\leq c$'),
(1040112, 1040107, '<i>Definition</i>. A <i>partially ordered set</i> is a set $A$ with a partial order $\\\\leq$ on $A$ that is [...], [...], and [...].', 'reflexive, antisymmetric, transitive'),
(1040113, 1040108, '<i>Definition</i>. If $R$ is a binary relation on a set $A$, elements $a, b \\\\in A$ are <i>comparable</i> if [...].', '$(a, b) \\\\in R$ or $(b, a) \\\\in R$'),
(1040114, 1040108, '<i>Definition</i>. If $R$ is a binary relation on a set $A$, and $(a, b) \\\\in R$ or $(b, a) \\\\in R$, for some $a, b \\\\in A$, then $a$ and $b$ are said to be [...].', 'comparable'),
(1040115, 1040109, '<i>Definition</i>. A <i>totally ordered set</i> or <i>chain</i> $A$ is [...] such that [...].', 'a partially ordered set, $a$ and $b$ are comparable, for all $a, b \\\\in A$'),
(1040116, 1040109, '<i>Definition</i>. A partially ordered set $A$ with the property that $a$ and $b$ are comparable, for all $a, b \\\\in A$, is said to be [...].', 'a totally ordered set or chain'),
(1040117, 1040110, '<i>Definition</i>. An <i>upper bound</i> of a subset $B$ of a partially ordered set $A$ is [...].', 'an element $m \\\\in A$ such that $b \\\\leq m$, for all $b \\\\in B$'),
(1040118, 1040110, '<i>Definition</i>. If $A$ is a partially ordered set, $B \\\\subseteq A$, and there is an $m \\\\in A$ such that $b \\\\leq m$, for all $b \\\\in B$, then $m$ is said to be [...].', 'an upper bound of $B$'),
(1040119, 1040111, '<i>Definition</i>. A <i>maximal element</i> of a partially ordered set $A$ is [...].', 'an element $m \\\\in A$ such that $m \\\\leq a$ implies $m = a$, for all $a \\\\in A$'),
(1040120, 1040111, '<i>Definition</i>. If $A$ is a partially ordered set, and $m \\\\in A$ is an element such that $m \\\\leq a$ implies $m = a$, for all $a \\\\in A$, then $m$ is said to be [...].', 'a maximal element of $A$'),
(1040121, 1040112, '<i>Zorn''s Lemma</i>. If $A \\\\neq \\\\emptyset$ is a partially ordered set, and every chain $C \\\\subseteq A$ has an upper bound, then [...].', '$A$ has a maximal element'),
(1040122, 1040112, '<i>Zorn''s Lemma</i>. If $A \\\\neq \\\\emptyset$ is a partially ordered set, and [...], then $A$ has a maximal element.', 'every chain $C \\\\subseteq A$ has an upper bound'),
(1040123, 1040113, '<i>Hamel Basis</i>. Every [...] vector space [...].', 'nonempty, has a Hamel basis'),
(1040124, 1040114, '<i>Total Orthonormal Set</i>. Every [...] Hilbert space [...] a total orthonormal set.', 'nonempty, contains'),
(1040125, 1040115, '<i>Definition</i>. A <i>subadditive</i> function is a function $f : X \\\\rightarrow Y$, where $Y$ is partially ordered, such that [...].', '$f(a + b) \\\\leq f(a) + f(b)$, for all $a, b \\\\in X$'),
(1040126, 1040115, '<i>Definition</i>. A function $f : X \\\\rightarrow Y$, where $Y$ is partially ordered, such that $f(a + b) \\\\leq f(a) + f(b)$, for all $a, b \\\\in X$, is said to be [...].', 'subadditive'),
(1040127, 1040116, '<i>Definition</i>. A function $f : X \\\\rightarrow \\\\mathbb{R}$ is <i>positive-homogeneous</i> if [...].', '$f(\\\\alpha x) = \\\\alpha f(x)$, for all $\\\\alpha \\\\geq 0$ and $x \\\\in X$'),
(1040128, 1040116, '<i>Definition</i>. A function $f : X \\\\rightarrow \\\\mathbb{R}$ such that $f(\\\\alpha x) = \\\\alpha f(x)$, for all $\\\\alpha \\\\geq 0$ and $x \\\\in X$ is said to be [...].', 'positive-homogeneous'),
(1040129, 1040117, '<i>Definition</i>. A <i>sublinear functional</i> is a real-valued functional on a vector space that is [...] and [...].', 'subadditive, positive-homogenous'),
(1040130, 1040117, '<i>Definition</i>. A real-valued functional on a vector space that is subadditive and positive-homogeneous is said to be [...].', 'a sublinear functional'),
(1040131, 1040118, '<i>Hahn-Banach Theorem</i>. Let $X$ be a real vector space, $p$ a sublinear functional on $X$, and $f$ a linear functional defined on a subspace $A \\\\subseteq X$ such that $f(a) \\\\leq p(a)$, for all $a \\\\in A$, then [...].', 'there is an extension $\\\\tilde{f}$ of $f$ to $X$ such that $\\\\tilde{f}(x) \\\\leq p(x)$, for all $x \\\\in X$'),
(1040132, 1040118, '<i>Hahn-Banach Theorem</i>. Let $X$ be a real vector space, $p$ a sublinear functional on $X$, and $f$ a [...], then there is an extension $\\\\tilde{f}$ of $f$ to $X$ such that $\\\\tilde{f}(x) \\\\leq p(x)$, for all $x \\\\in X$.', 'linear functional defined on a subspace $A \\\\subseteq X$ such that $f(a) \\\\leq p(a)$, for all $a \\\\in A$'),
(1040133, 1040119, '<i>Generalized Hahn-Banach Theorem</i>. Let $X$ be a real or complex vector space, $p : X \\\\rightarrow \\\\mathbb{R}$ a subadditive linear functional such that [...], and $f$ a linear functional on a subspace $A \\\\subseteq X$ such that [...]. Then, $f$ has a linear extension $\\\\tilde{f}$ to $X$ satisfying [...].', '$p(\\\\alpha x) = |\\\\alpha| p(x)$, for every scalar $\\\\alpha$ and $x \\\\in X$, $|f(a)| \\\\leq p(a)$, for all $a \\\\in A$, $|\\\\tilde{f}(x)| \\\\leq p(x)$, for all $x \\\\in X$'),
(1040134, 1040120, '<i>Hahn-Banach Theorem (Normed Spaces)</i>. If $f$ is a bounded linear functional on a subspace $A$ of a normed space $X$, then [...].', 'there is a bounded linear extension $\\\\tilde{f}$ of $f$ to $X$ such that $\\\\lVert \\\\tilde{f} \\\\rVert = \\\\lVert f \\\\rVert$'),
(1040135, 1040120, '<i>Hahn-Banach Theorem (Normed Spaces)</i>. If $f$ is [...] on a subspace $A$ of a normed space $X$, then there is a bounded linear extension $\\\\tilde{f}$ of $f$ to $X$ such that $\\\\lVert \\\\tilde{f} \\\\rVert = \\\\lVert f \\\\rVert$.', 'a bounded linear functional'),
(1040136, 1040121, '<i>Theorem</i>. If $X$ is a normed space, and $x_0 \\\\in X$ is nonzero, then there is a bounded linear functional $f$ on $X$ such that [...].', '$\\\\lVert f \\\\rVert = 1$ and $f(x_0) = \\\\lVert x_0 \\\\rVert$'),
(1040137, 1040122, '<i>Corollary</i>. Since there is a bounded linear functional $f$ of norm $1$ such that $f(x_0) = \\\\lVert x_0 \\\\rVert$, it follows that $\\\\lVert x \\\\rVert = $ [...], for all $f \\\\in X''$, and it follows that $f(x_0) = 0$, for all $f \\\\in X''$, implies [...].', '$\\\\mathrm{sup}_{f \\\\in X'' \\\\backslash \\\\{0\\\\}} |f(x)| / \\\\lVert f \\\\rVert$, $x_0 = 0$'),
(1010101, 1010101, '<i>Definition</i>. If $d : X \\\\rightarrow \\\\mathbb{R}$ is a <i>distance function</i> on a set $X$ and $d(x, y) = 0$ for some $x, y \\\\in X$, then [...].', '$x = y$'),
(1010102, 1010101, '<i>Definition</i>. If $d : X \\\\rightarrow \\\\mathbb{R}$ is a <i>distance function</i> on a set $X$ and $x = y$ for some $x, y \\\\in X$, then [...].', '$d(x, y) = 0$'),
(1010103, 1010102, '<i>Definition</i>. If $d : X \\\\rightarrow \\\\mathbb{R}$ is a <i>distance function</i> on a set $X$, then $d(x, y)$ and $d(y, x)$ are [...], for all $x, y \\\\in X$.', 'equal'),
(1010104, 1010102, '<i>Definition</i>. If $d : X \\\\rightarrow \\\\mathbb{R}$ is a <i>distance function</i> on a set $X$, then $d(x, y)$ equals [...], for all $x, y \\\\in X$.', '$d(y, x)$'),
(1010105, 1010103, '<i>Definition</i>. If $d : X \\\\rightarrow \\\\mathbb{R}$ is a <i>distance function</i> on a set $X$, then [...], for all $x, y, z \\\\in X$.', '$d(x, y) \\\\leq d(x, z) + d(z, y)$'),
(1010106, 1010104, '<i>Proposition</i>. If $d : X \\\\rightarrow \\\\mathbb{R}$ is a distance function on a set $X$, then [...], for all $x, y \\\\in X$.', '$d(x, y) \\\\geq 0$'),
(1010107, 1010105, '<i>Proposition</i>. The <i>generalized triangle inequality</i> states [...].', '$d(x_1, x_n) \\\\leq d(x_1, x_2) + d(x_2, x_3) + \\\\cdots + d(x_{n-1}, x_n)$, for each $x_i \\\\in X$'),
(1010108, 1010106, '<i>Definition</i>. A <i>metric space</i> is [...].', 'a pair $(X, d)$, where $X$ is a set and $d$ is a distance function on $X$'),
(1010109, 1010107, '<i>Definition</i>. A <i>subspace</i> of a metric space $(X, d)$ is [...].', 'a subset $Y \\\\subseteq X$ together with the restriction $\\\\tilde{d}$ of $d$ to $Y$'),
(1010110, 1010108, '<i>Example</i>. The real line $\\\\mathbb{R}$ together with the usual metric [...] forms a metric space.', '$d(x, y) = |x - y|$, for all $x, y \\\\in \\\\mathbb{R}$'),
(1010111, 1010109, '<i>Example</i>. The real plane $\\\\mathbb{R}^2$ together with the standard metric [...], where $x = (x_1, x_2)$ and $y = (y_1, y_2)$, for all $x, y \\\\in \\\\mathbb{R}^2$, forms a metric space.', '$d(x, y) = \\\\sqrt{(x_1 - y_1)^2 + (x_2 - y_2)^2}$'),
(1010112, 1010110, '<i>Example</i>. The real plane $\\\\mathbb{R}^2$ together with the taxicab metric [...], where $x = (x_1, x_2)$ and $y = (y_1, y_2)$, for all $x, y \\\\in \\\\mathbb{R}^2$, forms a metric space.', '$d(x, y) = |x_1 - y_1| + |x_2 - y_2|$'),
(1010113, 1010111, '<i>Example</i>. The sequence space $l^\\\\infty$ consisting of the set of [...] together with the metric [...] is a metric space.', 'all bounded sequences of complex numbers, $d(x, y) = \\\\mathrm{sup}_{i \\\\in \\\\mathbb{N}} |x_i - y_i|$, where $x = (x_1, x_2, \\\\ldots), y = (y_1, y_2, \\\\ldots) \\\\in l^\\\\infty$'),
(1010114, 1010112, '<i>Example</i>. The function space $C[a, b]$ consisting of the set of [...] together with the metric [...] is a metric space.', 'all continuous real-valued functions defined on $[a, b] \\\\subseteq \\\\mathbb{R}$, $d(x, y) = \\\\mathrm{max}_{t \\\\in [a, b]} |x(t) - y(t)|$, for all $x, y \\\\in C[a, b]$'),
(1010115, 1010113, '<i>Example</i>. The discrete space where $X$ is [...] and the metric $d$ on $X$ is [...] is a metric space.', 'any set, defined by $d(x,y) = 0$ when $x = y$ and $d(x, y) = 1$ otherwise');

-- --------------------------------------------------------

--
-- Table structure for table `questionwronganswers`
--

CREATE TABLE IF NOT EXISTS `questionwronganswers` (
  `questionID` int(10) unsigned NOT NULL,
  `wrongAnswer` varchar(256) NOT NULL,
  KEY `questionID` (`questionID`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `questionwronganswers`
--

INSERT INTO `questionwronganswers` (`questionID`, `wrongAnswer`) VALUES
(1040103, '$a < a$'),
(1040103, '$a > a$'),
(1040103, '$a \\\\geq a$'),
(1040103, '$a + a \\\\in A$'),
(1040103, '$a^2 \\\\in $'),
(1040103, '$\\\\neg a \\\\in A$'),
(1040102, 'symmetric'),
(1040102, 'antisymmetric'),
(1040102, 'transitive'),
(1040102, 'antitransitive'),
(1040102, 'antireflexive'),
(1040102, 'total'),
(1040101, '$a \\\\in R$, for all $a \\\\in A$'),
(1040101, '$a \\\\in R$, for some $a \\\\in A$'),
(1040101, '$a + a \\\\in R$, for all $a \\\\in A$'),
(1040101, '$a + a \\\\in R$, for some $a \\\\in A$'),
(1040101, '$a^2 \\\\in R$, for all $a \\\\in A$'),
(1040101, '$a^2 \\\\in R$, for some $a \\\\in A$'),
(1040104, '$(a, b) \\\\in R$ and $(b, a) \\\\in R$ imply $a \\\\neq b$, for all $a, b \\\\in A$'),
(1040104, '$(a, b) \\\\in R$ or $(b, a) \\\\in R$ implies $a \\\\neq b$, for all $a, b \\\\in A$'),
(1040104, '$(a, b) \\\\in R$ or $(b, a) \\\\in R$ implies $a = b$, for all $a, b \\\\in A$'),
(1040104, '$(a, a) \\\\notin R$, for all $a \\\\in A$'),
(1040104, '$(a, a) \\\\in R$, for all $a \\\\in A$'),
(1040104, '$(a, b) \\\\in R$ and $(b, c) \\\\in R$ imply $(a, c) \\\\in R$, for all $a, b, c \\\\in A$'),
(1040105, 'reflexive'),
(1040105, 'antireflexive'),
(1040105, 'transitive'),
(1040105, 'antitransitive'),
(1040105, 'symmetric'),
(1040105, 'total'),
(1040106, '$a \\\\neq b$, for all $a, b \\\\in A$'),
(1040106, '$a \\\\neq b$, for some $a, b \\\\in A$'),
(1040106, '$a + b \\\\in R$, for all $a,b \\\\in A$'),
(1040106, '$a + b \\\\in R$, for some $a, b \\\\in A$'),
(1040106, '$ab \\\\in R$, for all $a, b \\\\in A$'),
(1040106, '$ab \\\\in R$, for some $a, b \\\\in A$'),
(1040107, '$a \\\\leq a + b$, $b \\\\leq a + b$'),
(1040107, '$a + b \\\\leq a$, $a + b \\\\leq b$'),
(1040107, '$a \\\\leq a$, $b \\\\leq b$'),
(1040107, '$a \\\\not\\\\leq a$, $b \\\\not\\\\leq b$'),
(1040107, '$a \\\\leq ab$, $b \\\\leq ab$'),
(1040107, '$ab \\\\leq a$, $ab \\\\leq b$'),
(1040108, '$(a, a) \\\\in R$, for all $a \\\\in A$'),
(1040108, '$(a, b) \\\\in R$ and $(b, a) \\\\in R$ imply $a = b$, for all $a, b \\\\in A$'),
(1040108, '$(a, a) \\\\notin R$, for all $a \\\\in A$'),
(1040108, '$(a, b) \\\\in R$ and $(b, a) \\\\in R$ imply $a \\\\neq b$, for all $a, b \\\\in A$'),
(1040108, '$(a, b) \\\\in R$ and $(b, c) \\\\in R$ imply $(a, c) \\\\notin R$, for all $a, b, c \\\\in A$'),
(1040108, '$(a, b) \\\\in R$ or $(b, a) \\\\in R$ implies $a = b$, for all $a, b \\\\in A$'),
(1040109, 'reflexive'),
(1040109, 'antireflexive'),
(1040109, 'symmetric'),
(1040109, 'antisymmetric'),
(1040109, 'antitransitive'),
(1040109, 'total'),
(1040110, '$c \\\\leq a$, for all $a, b, c \\\\in A$'),
(1040110, '$c \\\\leq a$, for some $a, b, c \\\\in A$'),
(1040110, '$a \\\\not\\\\leq c$, for all $a, b, c \\\\in A$'),
(1040110, '$a \\\\not\\\\leq c$, for some $a, b, c \\\\in A$'),
(1040110, '$c \\\\leq b$ and $b \\\\leq a$, for all $a, b, c \\\\in A$'),
(1040110, '$c \\\\leq b$ and $b \\\\leq a$, for some $a, b, c \\\\in A$'),
(1040111, '$b \\\\leq a$, $c \\\\leq b$'),
(1040111, '$b \\\\not\\\\leq a$, $c \\\\not\\\\leq b$'),
(1040111, '$a \\\\leq a$, $b \\\\leq b$'),
(1040111, '$a \\\\not\\\\leq a$, $b \\\\not\\\\leq b$'),
(1040111, '$a \\\\leq b$, $c \\\\leq c$'),
(1040111, '$a \\\\not\\\\leq b$, $c \\\\not\\\\leq c$'),
(1040112, 'reflexive, symmetric, transitive'),
(1040112, 'antireflexive, symmetric, transitive'),
(1040112, 'antireflexive, antisymmetric, transitive'),
(1040112, 'reflexive, antisymmetric, antitransitive'),
(1040112, 'antireflexive, antisymmetric, antitransitive'),
(1040112, 'reflexive, symmetric, total'),
(1040114, 'incomparable'),
(1040114, 'total'),
(1040114, 'complete'),
(1040114, 'incomplete'),
(1040114, 'partial'),
(1040114, 'impartial'),
(1040113, '$(a, a) \\\\in R$ or $(b, b) \\\\in R$'),
(1040113, '$(a, a) \\\\in R$ and $(b, b) \\\\in R$'),
(1040113, '$a + b \\\\in R$'),
(1040113, '$ab \\\\in R$'),
(1040113, '$(a, c) \\\\in R$ and $(c, b) \\\\in R$, for all $c \\\\in A$,'),
(1040113, '$(a, c) \\\\in R$ or $(c, b) \\\\in R$, for all $c \\\\in A$,'),
(1040115, 'an ordered set, $A$ contains a maximal element'),
(1040115, 'an ordered set, $A$ contains a minimal element'),
(1040115, 'an ordered set, $A$ contains a maximal element $a$ and a minimal element $b$'),
(1040115, 'a partially ordered set, $A$ contains a maximal element'),
(1040115, 'a partially ordered set, $A$ contains a minimal element'),
(1040115, 'a partially ordered set, $A$ contains a maximal element $a$ and a minimal element $b$'),
(1040116, 'a partially ordered set or chain'),
(1040116, 'a partially ordered set or link'),
(1040116, 'an impartially ordered set or chain'),
(1040116, 'an impartially ordered set or link'),
(1040116, 'a totally ordered set or link'),
(1040116, 'an impartially ordered set or chain link'),
(1040117, 'an element $m \\\\in A$ such that $m \\\\leq b$, for all $b \\\\in B$'),
(1040117, 'an element $m \\\\in A$ such that $m \\\\leq b$, for some $b \\\\in B$'),
(1040117, 'an element $m \\\\in B$ such that $b \\\\leq m$, for all $b \\\\in B$'),
(1040117, 'an element $m \\\\in B$ such that $b \\\\leq m$, for some $b \\\\in B$'),
(1040117, 'an element $m \\\\in A$ such that $m \\\\not\\\\leq b$, for all $b \\\\in B$'),
(1040117, 'an element $m \\\\in B$ such that $m \\\\not\\\\leq b$, for all $b \\\\in B$'),
(1040118, 'a maximum of $B$'),
(1040118, 'a maximal element of $B$'),
(1040118, 'a minimum of $B$'),
(1040118, 'a minimal element of $B$'),
(1040118, 'a lower bound of $B$'),
(1040118, 'a partial bound of $B$'),
(1040119, 'an element $m \\\\in A$ such that $a \\\\leq m$ implies $m = a$, for all $a \\\\in A$'),
(1040119, 'an element $m \\\\in A$ such that $a \\\\leq m$ implies $m = a$, for some $a \\\\in A$'),
(1040119, 'an element $m \\\\in A$ such that $m \\\\leq a$ implies $m = a$, for some $a \\\\in A$'),
(1040119, 'an element $m \\\\in A$ such that $m \\\\leq a$ implies $m \\\\neq a$, for all $a \\\\in A$'),
(1040119, 'an element $m \\\\in A$ such that $m \\\\leq a$ implies $m \\\\neq a$, for some $a \\\\in A$'),
(1040119, 'an element $m \\\\in A$ such that $a \\\\leq m$ implies $m \\\\neq a$, for all $a \\\\in A$'),
(1040120, 'a maximum of $A$'),
(1040120, 'a minimum of $A$'),
(1040120, 'a minimal element of $A$'),
(1040120, 'a total element of $A$'),
(1040120, 'an upper bound of $A$'),
(1040120, 'a lower bound of $A$'),
(1040121, '$A$ has a maximum element'),
(1040121, '$A$ has a minimum element'),
(1040121, '$A$ has an upper bound'),
(1040121, '$A$ has a lower bound'),
(1040121, '$A$ has a minimal element'),
(1040121, '$A$ is a total order'),
(1040122, 'every chain $C \\\\subseteq A$ has a lower bound'),
(1040122, 'every chain $C \\\\subseteq A$ has a minimum element'),
(1040122, 'every subset $C \\\\subseteq A$ has an upper bound'),
(1040122, 'every subset $C \\\\subseteq A$ has a lower bound'),
(1040122, '$A$ is complete'),
(1040122, '$A$ is countable'),
(1040123, 'nonempty, does not have a Hamel basis'),
(1040123, 'empty, has a Hamel basis'),
(1040123, 'countable, has a Hamel basis'),
(1040123, 'countable, does not have a Hamel basis'),
(1040123, 'separable, has a Hamel basis'),
(1040123, 'separable, does not have a Hamel basis'),
(1040124, 'nonempty, does not contain'),
(1040124, 'complete, contains'),
(1040124, 'complete, does not contain'),
(1040124, 'countable, contains'),
(1040124, 'uncountable, contains'),
(1040124, 'uncountable, does not contain'),
(1040125, '$f(a + b) < f(a) + f(b)$, for all $a, b \\\\in X$'),
(1040125, '$f(a + b) > f(a) + f(b)$, for all $a, b \\\\in X$'),
(1040125, '$f(a + b) \\\\geq f(a) + f(b)$, for all $a, b \\\\in X$'),
(1040125, '$f(a + b) = f(a) + f(b)$, for all $a, b \\\\in X$'),
(1040125, '$f(a + b) \\\\leq f(a) + f(b)$, for some $a, b \\\\in X$'),
(1040125, '$f(a + b) < f(a) + f(b)$, for some $a, b \\\\in X$'),
(1040126, 'additive'),
(1040126, 'superadditive'),
(1040126, 'linear'),
(1040126, 'nonlinear'),
(1040126, 'sublinear'),
(1040126, 'superlinear'),
(1040127, '$f(\\\\alpha x) \\\\leq \\\\alpha f(x)$, for all $\\\\alpha \\\\geq 0$ and $x \\\\in X$'),
(1040127, '$f(\\\\alpha x) \\\\geq \\\\alpha f(x)$, for all $\\\\alpha \\\\geq 0$ and $x \\\\in X$'),
(1040127, '$f(\\\\alpha x) < \\\\alpha f(x)$, for all $\\\\alpha \\\\geq 0$ and $x \\\\in X$'),
(1040127, '$f(\\\\alpha x) > \\\\alpha f(x)$, for all $\\\\alpha \\\\geq 0$ and $x \\\\in X$'),
(1040127, '$f(\\\\alpha x) \\\\neq \\\\alpha f(x)$, for all $\\\\alpha \\\\geq 0$ and $x \\\\in X$'),
(1040127, '$f(\\\\alpha x) = \\\\alpha f(x)$, for all $\\\\alpha \\\\in \\\\mathbb{R}$ and $x \\\\in X$'),
(1040128, 'negative-homogeneous'),
(1040128, 'multiplicatively homogeneous'),
(1040128, 'multiplicative'),
(1040128, 'additive'),
(1040128, 'subadditive'),
(1040128, 'subadditive-homogeneous'),
(1040129, 'subadditive, bounded'),
(1040129, 'bounded, positive-homogenous'),
(1040129, 'linear, positive-homogenous'),
(1040129, 'subadditive, linear'),
(1040129, 'linear, bounded'),
(1040129, 'additive, homogeneous'),
(1040130, 'a linear functional'),
(1040130, 'a bounded functional'),
(1040130, 'a closed functional'),
(1040130, 'a total functional'),
(1040130, 'a continuous functional'),
(1040130, 'a superlinear functional'),
(1040131, 'there is an extension $\\\\tilde{f}$ of $f$ to $X$ such that $\\\\tilde{f}(x) \\\\geq p(x)$, for all $x \\\\in X$'),
(1040131, 'there is an extension $\\\\tilde{f}$ of $f$ to $X$ such that $\\\\tilde{f}(x) > p(x)$, for all $x \\\\in X$'),
(1040131, 'there is an extension $\\\\tilde{f}$ of $f$ to $X$ such that $\\\\tilde{f}(x) < p(x)$, for all $x \\\\in X$'),
(1040131, 'there is a restriction $\\\\tilde{p}$ of $p$ to $A$ such that $\\\\tilde{p}(a) \\\\leq f(a)$, for all $a \\\\in A$'),
(1040131, 'there is a restriction $\\\\tilde{p}$ of $p$ to $A$ such that $\\\\tilde{p}(a) < f(a)$, for all $a \\\\in A$'),
(1040131, 'there is a restriction $\\\\tilde{p}$ of $p$ to $A$ such that $\\\\tilde{p}(a) = f(a)$, for all $a \\\\in A$'),
(1040132, 'linear functional defined on a subspace $A \\\\subseteq X$ such that $f(a) \\\\geq p(a)$, for all $a \\\\in A$'),
(1040132, 'linear functional defined on a subspace $A \\\\subseteq X$ such that $f(a) < p(a)$, for all $a \\\\in A$'),
(1040132, 'linear functional defined on a subspace $A \\\\subseteq X$ such that $f(a) > p(a)$, for all $a \\\\in A$'),
(1040132, 'linear functional defined on $X$ such that $f(x) \\\\geq p(x)$, for all $x \\\\in X$'),
(1040132, 'linear functional defined on $X$ such that $f(x) < p(x)$, for all $x \\\\in X$'),
(1040132, 'linear functional defined on $X$ such that $f(x) > p(x)$, for all $x \\\\in X$'),
(1040133, '$p(\\\\alpha x) = \\\\alpha p(x)$, for every scalar $\\\\alpha$ and $x \\\\in X$, $f(a) \\\\leq p(a)$, for all $a \\\\in A$, $\\\\tilde{f}(x) \\\\leq p(x)$, for all $x \\\\in X$'),
(1040133, '$p(\\\\alpha x) = \\\\alpha p(x)$, for every $\\\\alpha \\\\in \\\\mathbb{R}$ and $x \\\\in X$, $|f(a)| \\\\leq p(a)$, for all $a \\\\in A$, $|\\\\tilde{f}(x)| \\\\leq p(x)$, for all $x \\\\in X$'),
(1040133, '$p(\\\\alpha x) = \\\\alpha p(x)$, for every $\\\\alpha \\\\geq 0$ and $x \\\\in X$, $|f(a)| \\\\leq p(a)$, for all $a \\\\in A$, $|\\\\tilde{f}(x)| \\\\leq p(x)$, for all $x \\\\in X$'),
(1040133, '$p(\\\\alpha x) = |\\\\alpha| p(x)$, for every scalar $\\\\alpha$ and $x \\\\in X$, $|f(a)| \\\\geq p(a)$, for all $a \\\\in A$, $|\\\\tilde{f}(x)| \\\\leq p(x)$, for all $x \\\\in X$'),
(1040133, '$p(\\\\alpha x) = |\\\\alpha| p(x)$, for every scalar $\\\\alpha$ and $x \\\\in X$, $|f(a)| > p(a)$, for all $a \\\\in A$, $|\\\\tilde{f}(x)| \\\\leq p(x)$, for all $x \\\\in X$'),
(1040133, '$p(\\\\alpha x) = |\\\\alpha| p(x)$, for every scalar $\\\\alpha$ and $x \\\\in X$, $|f(a)| < p(a)$, for all $a \\\\in A$, $|\\\\tilde{f}(x)| \\\\leq p(x)$, for all $x \\\\in X$'),
(1040134, 'there is an extension $\\\\tilde{f}$ of $f$ to $X$ such that $\\\\lVert \\\\tilde{f} \\\\rVert = \\\\lVert f \\\\rVert$'),
(1040134, 'there is a bounded extension $\\\\tilde{f}$ of $f$ to $X$ such that $\\\\lVert \\\\tilde{f} \\\\rVert = \\\\lVert f \\\\rVert$'),
(1040134, 'there is a linear extension $\\\\tilde{f}$ of $f$ to $X$ such that $\\\\lVert \\\\tilde{f} \\\\rVert = \\\\lVert f \\\\rVert$'),
(1040134, 'there is an extension $\\\\tilde{f}$ of $f$ to $X$ such that $\\\\lVert \\\\tilde{f} \\\\rVert \\\\neq \\\\lVert f \\\\rVert$'),
(1040134, 'there is a bounded extension $\\\\tilde{f}$ of $f$ to $X$ such that $\\\\lVert \\\\tilde{f} \\\\rVert \\\\neq \\\\lVert f \\\\rVert$'),
(1040134, 'there is a linear extension $\\\\tilde{f}$ of $f$ to $X$ such that $\\\\lVert \\\\tilde{f} \\\\rVert \\\\neq \\\\lVert f \\\\rVert$'),
(1040135, 'a bounded functional'),
(1040135, 'a linear functional'),
(1040135, 'a sublinear functional'),
(1040135, 'a bounded sublinear functional'),
(1040135, 'an unbounded linear functional'),
(1040135, 'an unbounded sublinear functional'),
(1040136, '$\\\\lVert f \\\\rVert = 0$ and $f(x_0) = \\\\lVert x_0 \\\\rVert^{-1}$'),
(1040136, '$\\\\lVert f \\\\rVert = 0$ and $f(x_0) = \\\\lVert x_0 \\\\rVert$'),
(1040136, '$\\\\lVert f \\\\rVert = 0$ and $f(x_0) = 1$'),
(1040136, '$\\\\lVert f \\\\rVert = 1$ and $f(x_0) = 2\\\\lVert x_0 \\\\rVert$'),
(1040136, '$\\\\lVert f \\\\rVert = 1$ and $f(x_0) = \\\\lVert x_0 \\\\rVert + \\\\lVert x_0 \\\\rVert^{-1}$'),
(1040136, '$f(x_0) = 0$ but $f(\\\\alpha x_0) \\\\neq 0$ for all $\\\\alpha \\\\neq 1$'),
(1040137, '$\\\\mathrm{inf}_{f \\\\in X'' \\\\backslash \\\\{0\\\\}} |f(x)| / \\\\lVert x \\\\rVert$, $x_0 \\\\neq 0$'),
(1040137, '$\\\\mathrm{sup}_{f \\\\in X'' \\\\backslash \\\\{0\\\\}} |f(x)| \\\\lVert x \\\\rVert / \\\\lVert f \\\\rVert$, $x_0 = 0$'),
(1040137, '$\\\\mathrm{sup}_{f \\\\in X'' \\\\backslash \\\\{0\\\\}} |f(x)| / \\\\lVert f \\\\rVert$, $x_0 \\\\neq 0$'),
(1040137, '$\\\\mathrm{sup}_{f \\\\in X'' \\\\backslash \\\\{0\\\\}} |f(x)| \\\\lVert f \\\\rVert / \\\\lVert x \\\\rVert$, $x_0 = 0$'),
(1040137, '$\\\\mathrm{sup}_{f \\\\in X'' \\\\backslash \\\\{0\\\\}} |f(x)| / \\\\lVert x \\\\rVert$, $x_0 \\\\neq 0$'),
(1040137, '$\\\\mathrm{inf}_{f \\\\in X'' \\\\backslash \\\\{0\\\\}} |f(x)| / \\\\lVert f \\\\rVert$, $x_0 \\\\neq 0$'),
(1010101, '$x \\\\neq y$'),
(1010101, '$x > y$'),
(1010101, '$x < y$'),
(1010101, '$x + y \\\\in X$'),
(1010101, '$xy \\\\in X$'),
(1010101, '$ax + by \\\\in X$, for all $a, b \\\\in X$'),
(1010102, '$d(x, y) \\\\neq 0$'),
(1010102, '$d(x, y) > 0$'),
(1010102, '$d(x, y) < 0$'),
(1010102, '$d(x, z) + d(z, y) = d(x, y)$, for all $z \\\\in X$'),
(1010102, '$d(x, z) + d(z, y) = 0$'),
(1010102, '$d(x, y) d(y, z) = 0$, for all $z \\\\in X$'),
(1010103, 'not equal'),
(1010103, 'negative'),
(1010103, 'rational'),
(1010103, 'irrational'),
(1010103, 'distinct conjugates'),
(1010103, 'transcendental'),
(1010104, '$0$'),
(1010104, '$-d(x, y)$'),
(1010104, 'a power of $2$'),
(1010104, 'a rational number'),
(1010104, 'an irrational number'),
(1010104, 'a transcendental number'),
(1010105, '$d(x, y) = d(x, z) + d(z, y)$'),
(1010105, '$d(x, y) \\\\geq d(x, z) + d(z, y)$'),
(1010105, '$d(x, y) > d(x, z) + d(z, y)$'),
(1010105, '$d(x, y) < d(x, z) + d(z, y)$'),
(1010105, '$d(x, y) \\\\neq d(x, z) + d(z, y)$'),
(1010105, '$d(x, y) = d(x, z) d(z, y)$'),
(1010106, '$d(x, y) \\\\leq 0$'),
(1010106, '$d(x, y) = 0$'),
(1010106, '$d(x, y) \\\\neq 0$'),
(1010106, '$d(x, y) < 0$'),
(1010106, '$d(x, y) > 0$'),
(1010106, '$d(x, x) + d(y, y) > 0$'),
(1010107, '$d(x, y) \\\\leq d(x, z) + d(z, y)$, for all $x, y, z \\\\in X$'),
(1010107, '$d(x, y)^2 \\\\leq d(x, z)^2 + d(z, y)^2$, for all $x, y, z \\\\in X$'),
(1010107, '$d(x_1, x_4) \\\\leq d(x_1, x_2) + d(x_2, x_3) + d(x_3, x_4)$, for each $x_i \\\\in X$'),
(1010107, '$d(x_1, x_n)^2 \\\\leq d(x_1, x_2)^2 + d(x_2, x_3)^2 + \\\\cdots + d(x_{n-1}, x_n)^2$, for each $x_i \\\\in X$'),
(1010107, '$d(x_1, x_n) \\\\geq d(x_1, x_2) + d(x_2, x_3) + \\\\cdots + d(x_{n-1}, x_n)$, for each $x_i \\\\in X$'),
(1010107, '$d(x, y) \\\\geq d(x, z) + d(z, y)$, for all $x, y, z \\\\in X$'),
(1010108, 'a pair $(X, d)$, where $X$ is a set and $d$ is a function'),
(1010108, 'a set $X$ whose elements $d \\\\in X$ are metrics'),
(1010108, 'a set $X$ whose elements $d \\\\in X$ are functions'),
(1010108, 'a distance function $d$'),
(1010108, 'the space $d_1 - d_2$ between two metrics $d_1$ and $d_2$'),
(1010108, 'a set $X$ whose elements are the spaces $d_1 - d_2$ between two metrics $d_1$ and $d_2$'),
(1010109, 'a set $Y$ together with the metric $d$'),
(1010109, 'a subset $Y \\\\subseteq X$ together with the metric $d$'),
(1010109, 'a subset $Y \\\\subseteq X$'),
(1010109, 'the set $Y$ of all possible metrics $d \\\\in Y$ on $X$'),
(1010109, 'a superset $Y \\\\supseteq X$ together with an extension $\\\\tilde{d}$ of $d$ to $Y$'),
(1010109, 'a superset $Y \\\\supseteq X$'),
(1010110, '$d(x, y) = x - y$, for all $x, y \\\\in \\\\mathbb{R}$'),
(1010110, '$d(x, y) = x^2 - y^2$, for all $x, y \\\\in \\\\mathbb{R}$'),
(1010110, '$d(x, y) = x^2 + y^2$, for all $x, y \\\\in \\\\mathbb{R}$'),
(1010110, '$d(x, y) = \\\\sqrt{x^2 + y^2}$, for all $x, y \\\\in \\\\mathbb{R}$'),
(1010110, '$d(x, y) = \\\\sqrt{x^2 - y^2}$, for all $x, y \\\\in \\\\mathbb{R}$'),
(1010110, '$d(x, y) = x + y$, for all $x, y \\\\in \\\\mathbb{R}$'),
(1010111, '$d(x, y) = |x_1 - y_1| - |x_2 - y_2|$'),
(1010111, '$d(x, y) = \\\\sqrt{(x_1 + y_1)^2 + (x_2 + y_2)^2}$'),
(1010111, '$d(x, y) = |x_1 - y_1| + |x_2 - y_2|$'),
(1010111, '$d(x, y) = (x_1 - y_1)^2 + (x_2 - y_2)^2$'),
(1010111, '$d(x, y) = (x_1 + y_1)^2 + (x_2 + y_2)^2$'),
(1010111, '$d(x, y) = \\\\sqrt{(x_1 - y_1)^2 - (x_2 - y_2)^2}$'),
(1010112, '$d(x, y) = |x_1 - y_1| - |x_2 - y_2|$'),
(1010112, '$d(x, y) = |x_2 - x_1| + |y_2 - y_1|$'),
(1010112, '$d(x, y) = \\\\sqrt{(x_1 - y_1)^2 + (x_2 - y_2)^2}$'),
(1010112, '$d(x, y) = \\\\sqrt{(x_1 - y_1)^2 - (x_2 - y_2)^2}$'),
(1010112, '$d(x, y) = (x_1 - y_1)^2 + (x_2 - y_2)^2$'),
(1010112, '$d(x, y) = (x_1 - y_1)^2 - (x_2 - y_2)^2$'),
(1010113, 'all bounded sequences of complex numbers, $d(x, y) = \\\\mathrm{sup}_{i \\\\in \\\\mathbb{N}} \\\\sqrt{x_i ^2 + y_i^2}$, where $x = (x_1, x_2, \\\\ldots), y = (y_1, y_2, \\\\ldots) \\\\in l^\\\\infty$'),
(1010113, 'all bounded sequences of real numbers, $d(x, y) = \\\\mathrm{sup}_{i \\\\in \\\\mathbb{N}} |x_i - y_i|$, where $x = (x_1, x_2, \\\\ldots), y = (y_1, y_2, \\\\ldots) \\\\in l^\\\\infty$'),
(1010113, 'all bounded sequences of complex numbers, $d(x, y) = \\\\mathrm{sup}_{i \\\\in \\\\mathbb{N}} |x_i + y_i|$, where $x = (x_1, x_2, \\\\ldots), y = (y_1, y_2, \\\\ldots) \\\\in l^\\\\infty$'),
(1010113, 'all bounded sequences of real numbers, $d(x, y) = \\\\mathrm{sup}_{i \\\\in \\\\mathbb{N}} |x_i + y_i|$, where $x = (x_1, x_2, \\\\ldots), y = (y_1, y_2, \\\\ldots) \\\\in l^\\\\infty$'),
(1010113, 'all bounded sequences of complex numbers, $d(x, y) = \\\\mathrm{sup}_{i \\\\in \\\\mathbb{N}} (x_i ^2 + y_i^2)$, where $x = (x_1, x_2, \\\\ldots), y = (y_1, y_2, \\\\ldots) \\\\in l^\\\\infty$'),
(1010113, 'all bounded sequences of real numbers, $d(x, y) = \\\\mathrm{sup}_{i \\\\in \\\\mathbb{N}} (x_i ^2 + y_i^2)$, where $x = (x_1, x_2, \\\\ldots), y = (y_1, y_2, \\\\ldots) \\\\in l^\\\\infty$'),
(1010114, 'all continuous real-valued functions defined on $[a, b] \\\\subseteq \\\\mathbb{R}$, $d(x, y) = \\\\mathrm{max}_{t \\\\in [a, b]} |x(t)^2 - y(t)^2|$, for all $x, y \\\\in C[a, b]$'),
(1010114, 'all continuous real-valued functions defined on $[a, b] \\\\subseteq \\\\mathbb{R}$, $d(x, y) = \\\\mathrm{min}_{t \\\\in [a, b]} |x(t) - y(t)|$, for all $x, y \\\\in C[a, b]$'),
(1010114, 'all continuous real-valued functions defined on $[a, b] \\\\subseteq \\\\mathbb{R}$, $d(x, y) = \\\\mathrm{min}_{t \\\\in [a, b]} |x(t)^2 - y(t)^2|$, for all $x, y \\\\in C[a, b]$'),
(1010114, 'all differentiable real-valued functions defined on $[a, b] \\\\subseteq \\\\mathbb{R}$, $d(x, y) = \\\\mathrm{max}_{t \\\\in [a, b]} |x(t) - y(t)|$, for all $x, y \\\\in C[a, b]$'),
(1010114, 'all differentiable real-valued functions defined on $[a, b] \\\\subseteq \\\\mathbb{R}$, $d(x, y) = \\\\mathrm{max}_{t \\\\in [a, b]} |x(t)^2 - y(t)^2|$, for all $x, y \\\\in C[a, b]$'),
(1010114, 'all differentiable real-valued functions defined on $[a, b] \\\\subseteq \\\\mathbb{R}$, $d(x, y) = \\\\mathrm{min}_{t \\\\in [a, b]} |x(t)^2 - y(t)^2|$, for all $x, y \\\\in C[a, b]$'),
(1010115, 'the empty set, defined by $d(x,y) = 0$ when $x = y$ and $d(x, y) = 1$ otherwise'),
(1010115, 'any set, defined by $d(x,y) = 1$ when $x = y$ and $d(x, y) = 0$ otherwise'),
(1010115, 'the empty set, defined by $d(x,y) = 1$ when $x = y$ and $d(x, y) = 0$ otherwise'),
(1010115, 'any algebraic set, defined by $d(x,y) = \\\\sqrt{(x - y)^2}$, for all $x, y \\\\in X$'),
(1010115, 'any algebraic set, defined by $d(x,y) = \\\\sqrt{(x + y)^2}$, for all $x, y \\\\in X$'),
(1010115, 'any set, defined by $d(x,y) = 0$, for all $x, y \\\\in X$');

-- --------------------------------------------------------

--
-- Table structure for table `searchconcepts`
--

CREATE TABLE IF NOT EXISTS `searchconcepts` (
  `tokenID` int(10) unsigned NOT NULL,
  `conceptID` int(10) unsigned NOT NULL,
  `count` int(10) unsigned NOT NULL,
  KEY `tokenID` (`tokenID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `searchconcepts`
--

INSERT INTO `searchconcepts` (`tokenID`, `conceptID`, `count`) VALUES
(1, 1010101, 8),
(2, 1010101, 2),
(3, 1010101, 2),
(4, 1010101, 4),
(5, 1010101, 12),
(6, 1010101, 2),
(7, 1010101, 2),
(8, 1010101, 2),
(9, 1010101, 2),
(10, 1010101, 4),
(11, 1010101, 2),
(12, 1010101, 2),
(13, 1010101, 2),
(14, 1010101, 2),
(15, 1010101, 2),
(16, 1010101, 6),
(17, 1010101, 2),
(18, 1010101, 2),
(19, 1010101, 2),
(20, 1010101, 2),
(21, 1010101, 2),
(1, 1010102, 8),
(2, 1010102, 2),
(3, 1010102, 2),
(4, 1010102, 6),
(5, 1010102, 12),
(6, 1010102, 2),
(7, 1010102, 2),
(8, 1010102, 2),
(9, 1010102, 2),
(10, 1010102, 4),
(11, 1010102, 2),
(12, 1010102, 2),
(13, 1010102, 2),
(14, 1010102, 2),
(21, 1010102, 2),
(16, 1010102, 6),
(15, 1010102, 1),
(22, 1010102, 1),
(18, 1010102, 2),
(23, 1010102, 2),
(20, 1010102, 2),
(24, 1010102, 1),
(25, 1010102, 1),
(1, 1010103, 4),
(2, 1010103, 1),
(3, 1010103, 1),
(4, 1010103, 4),
(5, 1010103, 6),
(6, 1010103, 1),
(7, 1010103, 1),
(8, 1010103, 1),
(9, 1010103, 1),
(10, 1010103, 2),
(11, 1010103, 1),
(12, 1010103, 1),
(13, 1010103, 1),
(14, 1010103, 1),
(21, 1010103, 1),
(18, 1010103, 1),
(23, 1010103, 1),
(16, 1010103, 3),
(26, 1010103, 3),
(20, 1010103, 1),
(27, 1010103, 1),
(1, 1010104, 2),
(28, 1010104, 1),
(3, 1010104, 1),
(4, 1010104, 2),
(5, 1010104, 5),
(6, 1010104, 1),
(7, 1010104, 1),
(8, 1010104, 1),
(9, 1010104, 1),
(10, 1010104, 2),
(11, 1010104, 1),
(12, 1010104, 1),
(13, 1010104, 1),
(14, 1010104, 1),
(21, 1010104, 1),
(18, 1010104, 1),
(23, 1010104, 1),
(16, 1010104, 2),
(20, 1010104, 1),
(29, 1010104, 1),
(17, 1010104, 1),
(1, 1010105, 5),
(28, 1010105, 1),
(30, 1010105, 1),
(31, 1010105, 1),
(32, 1010105, 1),
(33, 1010105, 1),
(34, 1010105, 1),
(4, 1010105, 4),
(5, 1010105, 10),
(35, 1010105, 3),
(36, 1010105, 3),
(27, 1010105, 1),
(37, 1010105, 2),
(38, 1010105, 1),
(39, 1010105, 1),
(18, 1010105, 1),
(40, 1010105, 1),
(20, 1010105, 1),
(1, 1010106, 4),
(2, 1010106, 1),
(10, 1010106, 4),
(41, 1010106, 1),
(42, 1010106, 1),
(9, 1010106, 3),
(43, 1010106, 1),
(5, 1010106, 3),
(4, 1010106, 2),
(44, 1010106, 1),
(14, 1010106, 1),
(15, 1010106, 1),
(11, 1010106, 1),
(12, 1010106, 1),
(13, 1010106, 1),
(1, 1010107, 4),
(2, 1010107, 1),
(10, 1010107, 3),
(45, 1010107, 1),
(46, 1010107, 2),
(41, 1010107, 1),
(42, 1010107, 1),
(5, 1010107, 2),
(4, 1010107, 3),
(9, 1010107, 1),
(47, 1010107, 1),
(16, 1010107, 2),
(48, 1010107, 1),
(49, 1010107, 1),
(50, 1010107, 1),
(30, 1010107, 1),
(51, 1010107, 1),
(52, 1010107, 1),
(53, 1010107, 1),
(1, 1010108, 2),
(54, 1010108, 1),
(30, 1010108, 2),
(55, 1010108, 1),
(56, 1010108, 1),
(7, 1010108, 2),
(8, 1010108, 2),
(49, 1010108, 1),
(50, 1010108, 1),
(57, 1010108, 1),
(41, 1010108, 2),
(58, 1010108, 1),
(10, 1010108, 1),
(42, 1010108, 1),
(4, 1010108, 1),
(5, 1010108, 3),
(16, 1010108, 3),
(18, 1010108, 1),
(23, 1010108, 1),
(20, 1010108, 1),
(1, 1010109, 2),
(54, 1010109, 1),
(30, 1010109, 2),
(55, 1010109, 1),
(59, 1010109, 1),
(7, 1010109, 2),
(8, 1010109, 2),
(37, 1010109, 8),
(49, 1010109, 1),
(50, 1010109, 1),
(60, 1010109, 1),
(41, 1010109, 2),
(44, 1010109, 1),
(5, 1010109, 7),
(35, 1010109, 4),
(15, 1010109, 1),
(16, 1010109, 7),
(18, 1010109, 1),
(23, 1010109, 1),
(20, 1010109, 1),
(58, 1010109, 1),
(10, 1010109, 1),
(42, 1010109, 1),
(4, 1010109, 1),
(61, 1010109, 1),
(1, 1010110, 2),
(54, 1010110, 1),
(30, 1010110, 2),
(55, 1010110, 1),
(59, 1010110, 1),
(7, 1010110, 2),
(8, 1010110, 2),
(37, 1010110, 6),
(49, 1010110, 1),
(50, 1010110, 1),
(62, 1010110, 1),
(41, 1010110, 2),
(44, 1010110, 1),
(5, 1010110, 7),
(35, 1010110, 4),
(15, 1010110, 1),
(16, 1010110, 7),
(18, 1010110, 1),
(23, 1010110, 1),
(20, 1010110, 1),
(58, 1010110, 1),
(10, 1010110, 1),
(42, 1010110, 1),
(4, 1010110, 1),
(1, 1010111, 5),
(54, 1010111, 1),
(30, 1010111, 3),
(63, 1010111, 1),
(42, 1010111, 2),
(64, 1010111, 2),
(65, 1010111, 2),
(66, 1010111, 1),
(46, 1010111, 3),
(14, 1010111, 1),
(49, 1010111, 1),
(50, 1010111, 1),
(41, 1010111, 2),
(9, 1010111, 1),
(10, 1010111, 1),
(23, 1010111, 1),
(67, 1010111, 1),
(68, 1010111, 1),
(69, 1010111, 1),
(70, 1010111, 1),
(4, 1010111, 1),
(5, 1010111, 5),
(16, 1010111, 5),
(71, 1010111, 1),
(72, 1010111, 1),
(20, 1010111, 2),
(7, 1010111, 1),
(36, 1010111, 1),
(44, 1010111, 1),
(35, 1010111, 2),
(37, 1010111, 2),
(73, 1010111, 2),
(1, 1010112, 2),
(54, 1010112, 1),
(30, 1010112, 3),
(12, 1010112, 1),
(42, 1010112, 2),
(74, 1010112, 2),
(10, 1010112, 5),
(75, 1010112, 4),
(66, 1010112, 1),
(46, 1010112, 2),
(14, 1010112, 1),
(49, 1010112, 1),
(50, 1010112, 1),
(41, 1010112, 2),
(9, 1010112, 1),
(23, 1010112, 2),
(76, 1010112, 1),
(55, 1010112, 1),
(77, 1010112, 1),
(78, 1010112, 1),
(79, 1010112, 1),
(13, 1010112, 1),
(48, 1010112, 1),
(7, 1010112, 1),
(8, 1010112, 1),
(4, 1010112, 1),
(5, 1010112, 3),
(16, 1010112, 3),
(71, 1010112, 1),
(80, 1010112, 1),
(81, 1010112, 3),
(20, 1010112, 2),
(18, 1010112, 1),
(1, 1010113, 2),
(54, 1010113, 1),
(30, 1010113, 2),
(82, 1010113, 1),
(42, 1010113, 2),
(44, 1010113, 1),
(5, 1010113, 5),
(9, 1010113, 3),
(15, 1010113, 2),
(41, 1010113, 2),
(4, 1010113, 3),
(13, 1010113, 1),
(10, 1010113, 1),
(83, 1010113, 1),
(14, 1010113, 1),
(79, 1010113, 1),
(84, 1010113, 1),
(16, 1010113, 3),
(17, 1010113, 1),
(85, 1010113, 1),
(35, 1010113, 1),
(86, 1010113, 1),
(1, 1040101, 6),
(2, 1040101, 2),
(10, 1040101, 14),
(87, 1040101, 2),
(88, 1040101, 2),
(8, 1040101, 5),
(13, 1040101, 2),
(14, 1040101, 2),
(9, 1040101, 3),
(89, 1040101, 2),
(3, 1040101, 2),
(20, 1040101, 4),
(18, 1040101, 2),
(23, 1040101, 2),
(15, 1040101, 1),
(21, 1040101, 1),
(90, 1040101, 1),
(53, 1040101, 1),
(91, 1040101, 1),
(1, 1040102, 4),
(2, 1040102, 1),
(10, 1040102, 7),
(92, 1040102, 1),
(93, 1040102, 1),
(27, 1040102, 2),
(13, 1040102, 1),
(14, 1040102, 1),
(94, 1040102, 1),
(18, 1040102, 1),
(23, 1040102, 1),
(20, 1040102, 1),
(1, 1040103, 6),
(2, 1040103, 2),
(3, 1040103, 3),
(8, 1040103, 8),
(9, 1040103, 4),
(10, 1040103, 16),
(87, 1040103, 2),
(88, 1040103, 2),
(13, 1040103, 2),
(14, 1040103, 2),
(95, 1040103, 2),
(75, 1040103, 8),
(20, 1040103, 6),
(15, 1040103, 3),
(96, 1040103, 2),
(18, 1040103, 2),
(23, 1040103, 2),
(21, 1040103, 1),
(90, 1040103, 1),
(53, 1040103, 1),
(91, 1040103, 1),
(1, 1040104, 8),
(2, 1040104, 2),
(3, 1040104, 2),
(27, 1040104, 6),
(9, 1040104, 2),
(10, 1040104, 16),
(92, 1040104, 2),
(97, 1040104, 2),
(13, 1040104, 2),
(14, 1040104, 2),
(21, 1040104, 2),
(75, 1040104, 8),
(15, 1040104, 2),
(96, 1040104, 2),
(18, 1040104, 2),
(23, 1040104, 2),
(20, 1040104, 2),
(1, 1040105, 6),
(2, 1040105, 2),
(3, 1040105, 3),
(8, 1040105, 11),
(9, 1040105, 4),
(10, 1040105, 13),
(87, 1040105, 2),
(88, 1040105, 2),
(13, 1040105, 2),
(14, 1040105, 2),
(21, 1040105, 2),
(98, 1040105, 2),
(75, 1040105, 6),
(20, 1040105, 8),
(15, 1040105, 3),
(74, 1040105, 6),
(96, 1040105, 2),
(18, 1040105, 2),
(23, 1040105, 2),
(90, 1040105, 1),
(53, 1040105, 1),
(91, 1040105, 1),
(1, 1040106, 8),
(2, 1040106, 2),
(3, 1040106, 2),
(27, 1040106, 8),
(9, 1040106, 2),
(10, 1040106, 14),
(92, 1040106, 2),
(93, 1040106, 2),
(13, 1040106, 2),
(14, 1040106, 2),
(21, 1040106, 2),
(75, 1040106, 6),
(15, 1040106, 2),
(74, 1040106, 6),
(96, 1040106, 2),
(18, 1040106, 2),
(23, 1040106, 2),
(20, 1040106, 2),
(1, 1040107, 4),
(2, 1040107, 1),
(10, 1040107, 5),
(99, 1040107, 1),
(100, 1040107, 1),
(14, 1040107, 2),
(9, 1040107, 2),
(50, 1040107, 1),
(92, 1040107, 1),
(97, 1040107, 1),
(27, 1040107, 1),
(13, 1040107, 1),
(101, 1040107, 1),
(15, 1040107, 1),
(89, 1040107, 1),
(95, 1040107, 1),
(98, 1040107, 1),
(1, 1040108, 6),
(2, 1040108, 2),
(3, 1040108, 3),
(8, 1040108, 6),
(9, 1040108, 2),
(10, 1040108, 15),
(87, 1040108, 2),
(88, 1040108, 2),
(13, 1040108, 2),
(14, 1040108, 2),
(102, 1040108, 1),
(75, 1040108, 7),
(20, 1040108, 6),
(22, 1040108, 2),
(103, 1040108, 2),
(104, 1040108, 2),
(15, 1040108, 2),
(18, 1040108, 1),
(19, 1040108, 1),
(21, 1040108, 1),
(90, 1040108, 1),
(53, 1040108, 1),
(91, 1040108, 1),
(1, 1040109, 8),
(2, 1040109, 2),
(10, 1040109, 12),
(105, 1040109, 2),
(100, 1040109, 4),
(14, 1040109, 4),
(104, 1040109, 2),
(106, 1040109, 2),
(9, 1040109, 2),
(107, 1040109, 1),
(101, 1040109, 2),
(99, 1040109, 2),
(15, 1040109, 2),
(75, 1040109, 4),
(22, 1040109, 2),
(103, 1040109, 2),
(18, 1040109, 2),
(23, 1040109, 2),
(20, 1040109, 2),
(50, 1040109, 1),
(30, 1040109, 1),
(108, 1040109, 1),
(90, 1040109, 1),
(53, 1040109, 1),
(91, 1040109, 1),
(1, 1040110, 6),
(2, 1040110, 2),
(109, 1040110, 4),
(110, 1040110, 2),
(111, 1040110, 2),
(46, 1040110, 3),
(10, 1040110, 8),
(47, 1040110, 1),
(75, 1040110, 9),
(99, 1040110, 2),
(100, 1040110, 2),
(14, 1040110, 2),
(9, 1040110, 4),
(112, 1040110, 1),
(113, 1040110, 5),
(20, 1040110, 4),
(107, 1040110, 2),
(101, 1040110, 2),
(27, 1040110, 2),
(18, 1040110, 2),
(23, 1040110, 2),
(3, 1040110, 1),
(48, 1040110, 1),
(15, 1040110, 1),
(114, 1040110, 1),
(21, 1040110, 1),
(90, 1040110, 1),
(53, 1040110, 1),
(91, 1040110, 1),
(1, 1040111, 6),
(2, 1040111, 2),
(10, 1040111, 17),
(115, 1040111, 2),
(112, 1040111, 4),
(46, 1040111, 2),
(99, 1040111, 2),
(100, 1040111, 2),
(14, 1040111, 2),
(9, 1040111, 4),
(109, 1040111, 2),
(113, 1040111, 7),
(20, 1040111, 4),
(107, 1040111, 2),
(101, 1040111, 2),
(27, 1040111, 2),
(116, 1040111, 2),
(18, 1040111, 2),
(23, 1040111, 2),
(3, 1040111, 1),
(15, 1040111, 1),
(21, 1040111, 1),
(90, 1040111, 1),
(53, 1040111, 1),
(91, 1040111, 1),
(1, 1040112, 4),
(117, 1040112, 2),
(118, 1040112, 2),
(119, 1040112, 2),
(3, 1040112, 2),
(10, 1040112, 10),
(120, 1040112, 2),
(121, 1040112, 2),
(9, 1040112, 2),
(99, 1040112, 2),
(100, 1040112, 2),
(14, 1040112, 2),
(15, 1040112, 2),
(122, 1040112, 2),
(106, 1040112, 2),
(74, 1040112, 2),
(48, 1040112, 2),
(123, 1040112, 4),
(109, 1040112, 2),
(110, 1040112, 2),
(111, 1040112, 2),
(21, 1040112, 2),
(115, 1040112, 2),
(112, 1040112, 2),
(1, 1040113, 2),
(124, 1040113, 2),
(125, 1040113, 2),
(122, 1040113, 1),
(126, 1040113, 1),
(42, 1040113, 1),
(127, 1040113, 1),
(123, 1040113, 1),
(10, 1040113, 1),
(1, 1040114, 2),
(128, 1040114, 2),
(129, 1040114, 2),
(14, 1040114, 2),
(122, 1040114, 1),
(130, 1040114, 1),
(42, 1040114, 1),
(10, 1040114, 1),
(127, 1040114, 1),
(131, 1040114, 1),
(1, 1040115, 6),
(2, 1040115, 2),
(10, 1040115, 9),
(132, 1040115, 2),
(12, 1040115, 3),
(9, 1040115, 4),
(133, 1040115, 8),
(5, 1040115, 4),
(6, 1040115, 2),
(16, 1040115, 4),
(44, 1040115, 2),
(99, 1040115, 2),
(100, 1040115, 2),
(107, 1040115, 2),
(101, 1040115, 2),
(75, 1040115, 6),
(27, 1040115, 2),
(18, 1040115, 2),
(23, 1040115, 2),
(20, 1040115, 2),
(90, 1040115, 1),
(53, 1040115, 1),
(91, 1040115, 1),
(1, 1040116, 6),
(2, 1040116, 2),
(10, 1040116, 2),
(12, 1040116, 2),
(133, 1040116, 6),
(5, 1040116, 10),
(6, 1040116, 2),
(7, 1040116, 2),
(8, 1040116, 2),
(9, 1040116, 2),
(134, 1040116, 2),
(135, 1040116, 2),
(3, 1040116, 1),
(136, 1040116, 6),
(18, 1040116, 2),
(23, 1040116, 2),
(29, 1040116, 2),
(17, 1040116, 2),
(15, 1040116, 2),
(20, 1040116, 2),
(107, 1040116, 1),
(101, 1040116, 1),
(90, 1040116, 1),
(53, 1040116, 1),
(91, 1040116, 1),
(1, 1040117, 6),
(2, 1040117, 2),
(10, 1040117, 6),
(137, 1040117, 2),
(138, 1040117, 4),
(9, 1040117, 4),
(55, 1040117, 2),
(77, 1040117, 2),
(13, 1040117, 2),
(126, 1040117, 2),
(42, 1040117, 2),
(101, 1040117, 2),
(15, 1040117, 2),
(132, 1040117, 2),
(134, 1040117, 2),
(139, 1040117, 1),
(135, 1040117, 1),
(90, 1040117, 1),
(53, 1040117, 1),
(91, 1040117, 1),
(1, 1040118, 4),
(140, 1040118, 2),
(141, 1040118, 2),
(142, 1040118, 2),
(143, 1040118, 2),
(5, 1040118, 16),
(91, 1040118, 2),
(10, 1040118, 18),
(55, 1040118, 2),
(126, 1040118, 2),
(42, 1040118, 2),
(144, 1040118, 6),
(137, 1040118, 2),
(138, 1040118, 4),
(13, 1040118, 4),
(15, 1040118, 2),
(133, 1040118, 10),
(145, 1040118, 2),
(79, 1040118, 2),
(45, 1040118, 2),
(48, 1040118, 2),
(107, 1040118, 4),
(101, 1040118, 4),
(27, 1040118, 4),
(18, 1040118, 4),
(23, 1040118, 4),
(20, 1040118, 4),
(21, 1040118, 2),
(114, 1040118, 2),
(9, 1040118, 2),
(109, 1040118, 2),
(146, 1040118, 2),
(52, 1040118, 4),
(46, 1040118, 2),
(53, 1040118, 2),
(1, 1040119, 2),
(31, 1040119, 1),
(140, 1040119, 1),
(141, 1040119, 1),
(142, 1040119, 1),
(143, 1040119, 1),
(5, 1040119, 12),
(91, 1040119, 1),
(10, 1040119, 10),
(55, 1040119, 1),
(104, 1040119, 1),
(69, 1040119, 1),
(126, 1040119, 1),
(42, 1040119, 1),
(144, 1040119, 5),
(6, 1040119, 1),
(7, 1040119, 1),
(8, 1040119, 1),
(132, 1040119, 1),
(145, 1040119, 3),
(138, 1040119, 2),
(107, 1040119, 2),
(101, 1040119, 2),
(15, 1040119, 2),
(133, 1040119, 5),
(13, 1040119, 1),
(45, 1040119, 1),
(48, 1040119, 1),
(21, 1040119, 1),
(123, 1040119, 1),
(146, 1040119, 1),
(52, 1040119, 2),
(53, 1040119, 1),
(147, 1040119, 1),
(136, 1040119, 3),
(18, 1040119, 3),
(122, 1040119, 1),
(148, 1040119, 1),
(20, 1040119, 3),
(27, 1040119, 2),
(23, 1040119, 2),
(1, 1040120, 4),
(140, 1040120, 2),
(141, 1040120, 2),
(142, 1040120, 2),
(149, 1040120, 4),
(150, 1040120, 2),
(3, 1040120, 2),
(133, 1040120, 10),
(9, 1040120, 4),
(10, 1040120, 10),
(67, 1040120, 4),
(145, 1040120, 4),
(138, 1040120, 2),
(13, 1040120, 2),
(45, 1040120, 2),
(46, 1040120, 4),
(42, 1040120, 2),
(5, 1040120, 4),
(21, 1040120, 2),
(114, 1040120, 2),
(146, 1040120, 2),
(52, 1040120, 4),
(53, 1040120, 2),
(107, 1040120, 2),
(101, 1040120, 2),
(151, 1040120, 4),
(152, 1040120, 4),
(1, 1040121, 2),
(142, 1040121, 1),
(3, 1040121, 1),
(5, 1040121, 6),
(9, 1040121, 3),
(10, 1040121, 2),
(149, 1040121, 1),
(42, 1040121, 1),
(15, 1040121, 2),
(17, 1040121, 3),
(20, 1040121, 1),
(153, 1040121, 1),
(21, 1040121, 1),
(114, 1040121, 1),
(67, 1040121, 1),
(145, 1040121, 1),
(138, 1040121, 1),
(133, 1040121, 3),
(13, 1040121, 1),
(107, 1040121, 1),
(101, 1040121, 1),
(151, 1040121, 2),
(152, 1040121, 2),
(35, 1040121, 1),
(1, 1040122, 2),
(154, 1040122, 1),
(155, 1040122, 1),
(114, 1040122, 1),
(9, 1040122, 1),
(10, 1040122, 1),
(67, 1040122, 1),
(145, 1040122, 1),
(138, 1040122, 1),
(133, 1040122, 8),
(46, 1040122, 1),
(156, 1040122, 1),
(35, 1040122, 1),
(107, 1040122, 1),
(101, 1040122, 3),
(5, 1040122, 9),
(17, 1040122, 7),
(151, 1040122, 3),
(152, 1040122, 3),
(157, 1040122, 2),
(158, 1040122, 2),
(18, 1040122, 2),
(23, 1040122, 2),
(20, 1040122, 3),
(15, 1040122, 1),
(116, 1040122, 1),
(71, 1040122, 1),
(72, 1040122, 1),
(159, 1040122, 1);

-- --------------------------------------------------------

--
-- Table structure for table `searchcourses`
--

CREATE TABLE IF NOT EXISTS `searchcourses` (
  `tokenID` int(10) unsigned NOT NULL,
  `courseID` int(10) unsigned NOT NULL,
  `count` int(10) unsigned NOT NULL,
  KEY `tokenID` (`tokenID`,`courseID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `searchcourses`
--

INSERT INTO `searchcourses` (`tokenID`, `courseID`, `count`) VALUES
(160, 1, 1),
(138, 1, 1),
(161, 1, 1),
(149, 1, 1),
(126, 1, 1),
(150, 1, 1),
(145, 1, 1),
(162, 1, 1),
(163, 1, 1),
(164, 1, 1),
(142, 1, 4),
(141, 1, 2),
(165, 1, 1),
(166, 1, 1),
(140, 1, 1),
(15, 1, 3),
(167, 1, 2),
(168, 1, 1),
(169, 1, 1),
(170, 1, 1),
(171, 1, 1),
(50, 1, 1),
(130, 1, 1),
(42, 1, 1),
(172, 1, 1),
(173, 1, 1),
(160, 2, 1),
(161, 2, 1),
(1, 2, 1),
(55, 2, 1),
(70, 2, 1),
(174, 2, 1),
(175, 2, 1),
(176, 2, 2),
(177, 2, 2),
(178, 2, 1),
(179, 2, 1),
(20, 2, 1),
(8, 2, 1),
(36, 2, 1),
(41, 2, 1),
(15, 2, 2),
(149, 2, 1),
(150, 2, 1),
(180, 2, 1),
(169, 2, 1),
(142, 2, 1),
(181, 2, 1),
(182, 2, 1),
(78, 2, 1),
(160, 3, 1),
(145, 3, 3),
(183, 3, 1),
(150, 3, 1),
(184, 3, 1),
(185, 3, 1),
(186, 3, 3),
(187, 3, 1),
(15, 3, 2),
(188, 3, 1),
(189, 3, 1),
(58, 3, 2),
(134, 3, 1),
(190, 3, 1),
(191, 3, 1),
(192, 3, 1),
(78, 3, 1),
(46, 3, 1),
(160, 4, 1),
(193, 4, 2),
(161, 4, 1),
(194, 4, 1),
(195, 4, 1),
(196, 4, 1),
(197, 4, 1),
(198, 4, 1),
(199, 4, 1),
(200, 4, 1),
(201, 4, 1),
(202, 4, 1),
(203, 4, 1),
(204, 4, 1),
(205, 4, 1),
(206, 4, 1),
(207, 4, 1),
(208, 4, 1),
(209, 4, 1),
(175, 4, 1),
(15, 4, 1),
(210, 4, 1),
(160, 5, 1),
(161, 5, 1),
(211, 5, 1),
(212, 5, 1),
(150, 5, 4),
(141, 5, 1),
(130, 5, 1),
(67, 5, 1),
(145, 5, 1),
(162, 5, 1),
(213, 5, 1),
(15, 5, 2),
(214, 5, 1),
(215, 5, 1),
(216, 5, 1),
(217, 5, 1),
(12, 5, 1);

-- --------------------------------------------------------

--
-- Table structure for table `searchexercises`
--

CREATE TABLE IF NOT EXISTS `searchexercises` (
  `tokenID` int(10) unsigned NOT NULL,
  `exerciseID` int(10) unsigned NOT NULL,
  `count` int(10) unsigned NOT NULL,
  KEY `tokenID` (`tokenID`,`exerciseID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `searchexercises`
--

INSERT INTO `searchexercises` (`tokenID`, `exerciseID`, `count`) VALUES
(218, 1010104, 3),
(23, 1010104, 4),
(219, 1010104, 4),
(13, 1010104, 5),
(220, 1010104, 1),
(221, 1010104, 1),
(30, 1010104, 5),
(14, 1010104, 2),
(5, 1010104, 24),
(66, 1010104, 2),
(46, 1010104, 2),
(10, 1010104, 5),
(222, 1010104, 1),
(166, 1010104, 1),
(223, 1010104, 1),
(224, 1010104, 1),
(225, 1010104, 1),
(16, 1010104, 10),
(18, 1010104, 2),
(155, 1010104, 2),
(226, 1010104, 3),
(227, 1010104, 4),
(228, 1010104, 3),
(4, 1010104, 6),
(17, 1010104, 6),
(229, 1010104, 1),
(230, 1010104, 1),
(41, 1010104, 1),
(9, 1010104, 2),
(231, 1010104, 1),
(12, 1010104, 2),
(15, 1010104, 2),
(232, 1010104, 1),
(11, 1010104, 1),
(91, 1010104, 1),
(233, 1010104, 1),
(120, 1010104, 2),
(234, 1010104, 1),
(235, 1010104, 1),
(236, 1010104, 1),
(237, 1010104, 3),
(238, 1010104, 2),
(239, 1010104, 1),
(240, 1010104, 1),
(241, 1010104, 2),
(242, 1010104, 1),
(243, 1010104, 1),
(244, 1010104, 1),
(44, 1010104, 1),
(55, 1010104, 1),
(245, 1010104, 1),
(246, 1010101, 2),
(55, 1010101, 2),
(56, 1010101, 2),
(9, 1010101, 5),
(41, 1010101, 5),
(42, 1010101, 3),
(101, 1010101, 3),
(30, 1010101, 4),
(7, 1010101, 6),
(8, 1010101, 6),
(10, 1010101, 4),
(50, 1010101, 1),
(57, 1010101, 2),
(13, 1010101, 2),
(4, 1010101, 10),
(5, 1010101, 18),
(16, 1010101, 18),
(18, 1010101, 2),
(23, 1010101, 2),
(20, 1010101, 3),
(226, 1010101, 2),
(227, 1010101, 1),
(247, 1010101, 1),
(248, 1010101, 1),
(12, 1010101, 3),
(249, 1010101, 1),
(11, 1010101, 2),
(250, 1010101, 2),
(251, 1010101, 3),
(3, 1010101, 2),
(21, 1010101, 2),
(17, 1010101, 4),
(252, 1010101, 1),
(229, 1010101, 1),
(228, 1010101, 1),
(237, 1010101, 5),
(238, 1010101, 4),
(35, 1010101, 1),
(26, 1010101, 7),
(240, 1010101, 1),
(241, 1010101, 2),
(253, 1010101, 1),
(27, 1010101, 1),
(243, 1010101, 1),
(155, 1010101, 1),
(254, 1010101, 1),
(46, 1010101, 1),
(22, 1010101, 1),
(255, 1010101, 1),
(84, 1010101, 1),
(9, 1010102, 2),
(248, 1010102, 2),
(12, 1010102, 5),
(10, 1010102, 4),
(41, 1010102, 3),
(13, 1010102, 3),
(30, 1010102, 5),
(55, 1010102, 1),
(56, 1010102, 1),
(256, 1010102, 2),
(4, 1010102, 8),
(5, 1010102, 18),
(16, 1010102, 18),
(37, 1010102, 9),
(257, 1010102, 1),
(7, 1010102, 2),
(8, 1010102, 2),
(3, 1010102, 3),
(229, 1010102, 2),
(258, 1010102, 1),
(157, 1010102, 2),
(86, 1010102, 1),
(246, 1010102, 1),
(259, 1010102, 1),
(260, 1010102, 1),
(226, 1010102, 2),
(261, 1010102, 1),
(53, 1010102, 1),
(247, 1010102, 1),
(262, 1010102, 1),
(94, 1010102, 1),
(263, 1010102, 1),
(264, 1010102, 1),
(46, 1010102, 1),
(11, 1010102, 1),
(250, 1010102, 2),
(251, 1010102, 3),
(21, 1010102, 3),
(17, 1010102, 3),
(101, 1010102, 1),
(228, 1010102, 1),
(265, 1010102, 1),
(35, 1010102, 3),
(38, 1010102, 1),
(26, 1010102, 3),
(266, 1010102, 1),
(267, 1010102, 1),
(155, 1010102, 1),
(32, 1010102, 1),
(33, 1010102, 1),
(268, 1010102, 2),
(269, 1010102, 1),
(18, 1010102, 1),
(270, 1010103, 1),
(248, 1010103, 1),
(41, 1010103, 3),
(13, 1010103, 3),
(30, 1010103, 5),
(55, 1010103, 1),
(56, 1010103, 1),
(246, 1010103, 1),
(101, 1010103, 5),
(12, 1010103, 3),
(4, 1010103, 11),
(5, 1010103, 26),
(16, 1010103, 26),
(61, 1010103, 13),
(9, 1010103, 2),
(10, 1010103, 4),
(7, 1010103, 3),
(8, 1010103, 3),
(226, 1010103, 3),
(227, 1010103, 1),
(247, 1010103, 1),
(94, 1010103, 2),
(263, 1010103, 1),
(264, 1010103, 2),
(46, 1010103, 3),
(11, 1010103, 2),
(250, 1010103, 2),
(251, 1010103, 3),
(3, 1010103, 2),
(21, 1010103, 2),
(17, 1010103, 3),
(229, 1010103, 2),
(228, 1010103, 2),
(155, 1010103, 1),
(237, 1010103, 8),
(238, 1010103, 6),
(37, 1010103, 4),
(26, 1010103, 15),
(27, 1010103, 3),
(18, 1010103, 1),
(23, 1010103, 1),
(20, 1010103, 1),
(157, 1010103, 1),
(158, 1010103, 1),
(240, 1010103, 1),
(241, 1010103, 2),
(253, 1010103, 1),
(243, 1010103, 1),
(84, 1010103, 1),
(271, 1010103, 1),
(272, 1010103, 1),
(273, 1010103, 1),
(274, 1010103, 1),
(275, 1010103, 1),
(276, 1010103, 1),
(218, 1010105, 2),
(277, 1010105, 1),
(15, 1010105, 6),
(278, 1010105, 1),
(279, 1010105, 1),
(101, 1010105, 5),
(280, 1010105, 1),
(219, 1010105, 2),
(143, 1010105, 1),
(4, 1010105, 17),
(91, 1010105, 3),
(10, 1010105, 8),
(41, 1010105, 7),
(13, 1010105, 6),
(14, 1010105, 2),
(5, 1010105, 19),
(23, 1010105, 4),
(281, 1010105, 18),
(20, 1010105, 1),
(7, 1010105, 1),
(8, 1010105, 1),
(107, 1010105, 1),
(282, 1010105, 3),
(22, 1010105, 1),
(18, 1010105, 5),
(226, 1010105, 4),
(227, 1010105, 4),
(228, 1010105, 4),
(120, 1010105, 1),
(17, 1010105, 10),
(229, 1010105, 4),
(16, 1010105, 10),
(3, 1010105, 8),
(230, 1010105, 2),
(155, 1010105, 2),
(11, 1010105, 1),
(12, 1010105, 2),
(233, 1010105, 1),
(21, 1010105, 4),
(30, 1010105, 4),
(283, 1010105, 1),
(284, 1010105, 2),
(46, 1010105, 3),
(285, 1010105, 1),
(286, 1010105, 2),
(287, 1010105, 2),
(51, 1010105, 2),
(288, 1010105, 1),
(27, 1010105, 3),
(26, 1010105, 4),
(289, 1010105, 1),
(232, 1010105, 1),
(290, 1010105, 1),
(291, 1010105, 1),
(9, 1010105, 4),
(83, 1010105, 2),
(97, 1010105, 2),
(292, 1010105, 1),
(293, 1010105, 1),
(294, 1010105, 2),
(268, 1010105, 1),
(295, 1010105, 1),
(55, 1010105, 1),
(245, 1010105, 1),
(231, 1010105, 1),
(237, 1010105, 2),
(30, 1010106, 9),
(32, 1010106, 3),
(33, 1010106, 3),
(13, 1010106, 5),
(10, 1010106, 1),
(63, 1010106, 3),
(42, 1010106, 3),
(246, 1010106, 1),
(101, 1010106, 1),
(41, 1010106, 3),
(64, 1010106, 4),
(65, 1010106, 4),
(94, 1010106, 2),
(9, 1010106, 1),
(4, 1010106, 4),
(5, 1010106, 13),
(16, 1010106, 13),
(71, 1010106, 5),
(72, 1010106, 5),
(1, 1010106, 28),
(20, 1010106, 7),
(7, 1010106, 6),
(36, 1010106, 6),
(44, 1010106, 1),
(35, 1010106, 3),
(37, 1010106, 3),
(73, 1010106, 3),
(15, 1010106, 1),
(143, 1010106, 1),
(26, 1010106, 13),
(18, 1010106, 1),
(40, 1010106, 1),
(226, 1010106, 2),
(228, 1010106, 2),
(237, 1010106, 6),
(238, 1010106, 4),
(27, 1010106, 3),
(271, 1010106, 1),
(296, 1010106, 1),
(274, 1010106, 1),
(275, 1010106, 1),
(240, 1010106, 1),
(241, 1010106, 2),
(253, 1010106, 1),
(239, 1010106, 1),
(244, 1010106, 1),
(243, 1010106, 1),
(234, 1010106, 1),
(297, 1010107, 3),
(41, 1010107, 4),
(13, 1010107, 3),
(10, 1010107, 5),
(47, 1010107, 1),
(46, 1010107, 4),
(63, 1010107, 1),
(42, 1010107, 1),
(298, 1010107, 1),
(9, 1010107, 5),
(30, 1010107, 4),
(14, 1010107, 1),
(48, 1010107, 1),
(64, 1010107, 1),
(65, 1010107, 1),
(66, 1010107, 1),
(23, 1010107, 1),
(68, 1010107, 1),
(299, 1010107, 1),
(15, 1010107, 5),
(300, 1010107, 1),
(143, 1010107, 1),
(5, 1010107, 9),
(35, 1010107, 5),
(37, 1010107, 2),
(73, 1010107, 2),
(16, 1010107, 9),
(91, 1010107, 1),
(224, 1010107, 1),
(102, 1010107, 1),
(21, 1010107, 1),
(40, 1010107, 1),
(1, 1010107, 4),
(301, 1010107, 3),
(17, 1010107, 3),
(104, 1010107, 3),
(229, 1010107, 1),
(101, 1010107, 2),
(234, 1010107, 1),
(4, 1010107, 2),
(120, 1010107, 1),
(82, 1010107, 1),
(9, 1010108, 5),
(248, 1010108, 1),
(10, 1010108, 23),
(41, 1010108, 3),
(13, 1010108, 3),
(30, 1010108, 6),
(42, 1010108, 1),
(46, 1010108, 3),
(76, 1010108, 1),
(78, 1010108, 1),
(143, 1010108, 1),
(4, 1010108, 10),
(74, 1010108, 5),
(75, 1010108, 19),
(302, 1010108, 1),
(6, 1010108, 1),
(7, 1010108, 1),
(8, 1010108, 1),
(91, 1010108, 2),
(79, 1010108, 1),
(84, 1010108, 2),
(5, 1010108, 22),
(16, 1010108, 22),
(303, 1010108, 11),
(81, 1010108, 37),
(304, 1010108, 11),
(3, 1010108, 3),
(229, 1010108, 1),
(258, 1010108, 1),
(157, 1010108, 2),
(86, 1010108, 1),
(246, 1010108, 1),
(259, 1010108, 1),
(260, 1010108, 1),
(226, 1010108, 3),
(227, 1010108, 2),
(247, 1010108, 1),
(262, 1010108, 1),
(94, 1010108, 1),
(263, 1010108, 2),
(264, 1010108, 2),
(11, 1010108, 1),
(12, 1010108, 1),
(250, 1010108, 2),
(251, 1010108, 3),
(21, 1010108, 2),
(17, 1010108, 3),
(18, 1010108, 4),
(23, 1010108, 3),
(20, 1010108, 4),
(155, 1010108, 3),
(305, 1010108, 2),
(233, 1010108, 1),
(306, 1010108, 1),
(231, 1010108, 1),
(234, 1010108, 1),
(101, 1010108, 1),
(40, 1010108, 2),
(228, 1010108, 2),
(237, 1010108, 5),
(238, 1010108, 4),
(307, 1010108, 1),
(308, 1010108, 1),
(309, 1010108, 1),
(26, 1010108, 9),
(240, 1010108, 1),
(241, 1010108, 2),
(253, 1010108, 1),
(27, 1010108, 1),
(243, 1010108, 1),
(22, 1010108, 1),
(255, 1010108, 1),
(30, 1010109, 6),
(82, 1010109, 4),
(41, 1010109, 7),
(246, 1010109, 1),
(101, 1010109, 2),
(9, 1010109, 5),
(10, 1010109, 3),
(13, 1010109, 3),
(83, 1010109, 3),
(14, 1010109, 3),
(143, 1010109, 1),
(5, 1010109, 23),
(91, 1010109, 2),
(16, 1010109, 20),
(26, 1010109, 9),
(20, 1010109, 1),
(15, 1010109, 3),
(4, 1010109, 16),
(310, 1010109, 1),
(237, 1010109, 3),
(238, 1010109, 2),
(239, 1010109, 1),
(240, 1010109, 1),
(241, 1010109, 2),
(242, 1010109, 1),
(17, 1010109, 3),
(35, 1010109, 4),
(120, 1010109, 4),
(243, 1010109, 1),
(244, 1010109, 1),
(226, 1010109, 2),
(227, 1010109, 1),
(270, 1010109, 1),
(94, 1010109, 1),
(263, 1010109, 1),
(264, 1010109, 1),
(46, 1010109, 1),
(250, 1010109, 2),
(251, 1010109, 3),
(84, 1010109, 1),
(2, 1010109, 1),
(3, 1010109, 6),
(230, 1010109, 1),
(21, 1010109, 3),
(311, 1010109, 1),
(104, 1010109, 2),
(32, 1010109, 1),
(33, 1010109, 1),
(312, 1010109, 1),
(155, 1010109, 2),
(157, 1010109, 1),
(313, 1010109, 1),
(53, 1010109, 1),
(27, 1010109, 1),
(301, 1010109, 1),
(228, 1010109, 1),
(37, 1010109, 1),
(291, 1010109, 1),
(314, 1010109, 1),
(246, 1010110, 3),
(101, 1010110, 8),
(315, 1010110, 2),
(11, 1010110, 2),
(9, 1010110, 13),
(10, 1010110, 17),
(41, 1010110, 6),
(143, 1010110, 2),
(5, 1010110, 27),
(17, 1010110, 25),
(35, 1010110, 3),
(15, 1010110, 4),
(302, 1010110, 2),
(30, 1010110, 17),
(14, 1010110, 1),
(46, 1010110, 9),
(23, 1010110, 1),
(100, 1010110, 1),
(316, 1010110, 1),
(299, 1010110, 1),
(300, 1010110, 1),
(4, 1010110, 4),
(16, 1010110, 16),
(151, 1010110, 16),
(152, 1010110, 16),
(44, 1010110, 1),
(245, 1010110, 1),
(153, 1010110, 3),
(317, 1010110, 2),
(20, 1010110, 6),
(13, 1010110, 5),
(248, 1010110, 1),
(318, 1010110, 1),
(1, 1010110, 3),
(53, 1010110, 7),
(270, 1010110, 1),
(226, 1010110, 2),
(227, 1010110, 2),
(94, 1010110, 1),
(263, 1010110, 1),
(264, 1010110, 1),
(26, 1010110, 9),
(21, 1010110, 4),
(250, 1010110, 2),
(251, 1010110, 3),
(3, 1010110, 4),
(123, 1010110, 1),
(231, 1010110, 2),
(319, 1010110, 1),
(122, 1010110, 1),
(320, 1010110, 11),
(229, 1010110, 3),
(155, 1010110, 2),
(321, 1010110, 1),
(256, 1010110, 1),
(268, 1010110, 4),
(322, 1010110, 1),
(262, 1010110, 1),
(104, 1010110, 5),
(228, 1010110, 1),
(40, 1010110, 3),
(301, 1010110, 3),
(24, 1010110, 6),
(323, 1010110, 3),
(157, 1010110, 1),
(324, 1010110, 2),
(22, 1010110, 2),
(325, 1010110, 2),
(326, 1010110, 2),
(327, 1010110, 3),
(91, 1010110, 1),
(328, 1010110, 1),
(274, 1010110, 1),
(329, 1010110, 1),
(118, 1010110, 2),
(330, 1010110, 2),
(239, 1010110, 1),
(331, 1010110, 2),
(27, 1010110, 1),
(332, 1010110, 1),
(293, 1010110, 1),
(333, 1010110, 1),
(244, 1010110, 1),
(33, 1010110, 2),
(334, 1010110, 1),
(234, 1010110, 1),
(258, 1010111, 2),
(30, 1010111, 9),
(31, 1010111, 6),
(32, 1010111, 8),
(33, 1010111, 7),
(335, 1010111, 1),
(34, 1010111, 1),
(101, 1010111, 2),
(237, 1010111, 14),
(238, 1010111, 8),
(4, 1010111, 16),
(5, 1010111, 33),
(35, 1010111, 16),
(36, 1010111, 7),
(27, 1010111, 4),
(37, 1010111, 5),
(38, 1010111, 4),
(39, 1010111, 3),
(18, 1010111, 5),
(40, 1010111, 1),
(1, 1010111, 1),
(20, 1010111, 1),
(44, 1010111, 1),
(9, 1010111, 2),
(10, 1010111, 1),
(41, 1010111, 1),
(42, 1010111, 1),
(226, 1010111, 2),
(336, 1010111, 1),
(84, 1010111, 3),
(337, 1010111, 2),
(338, 1010111, 1),
(265, 1010111, 1),
(334, 1010111, 3),
(19, 1010111, 1),
(339, 1010111, 1),
(281, 1010111, 15),
(228, 1010111, 1),
(155, 1010111, 1),
(229, 1010111, 1),
(291, 1010111, 1),
(23, 1010111, 1),
(29, 1010111, 1),
(340, 1010112, 2),
(30, 1010112, 4),
(31, 1010112, 3),
(32, 1010112, 3),
(33, 1010112, 3),
(53, 1010112, 1),
(246, 1010112, 1),
(101, 1010112, 5),
(4, 1010112, 29),
(5, 1010112, 26),
(16, 1010112, 14),
(26, 1010112, 14),
(341, 1010112, 14),
(27, 1010112, 7),
(18, 1010112, 2),
(23, 1010112, 1),
(20, 1010112, 2),
(44, 1010112, 1),
(9, 1010112, 1),
(10, 1010112, 1),
(41, 1010112, 1),
(42, 1010112, 1),
(34, 1010112, 1),
(237, 1010112, 18),
(238, 1010112, 12),
(35, 1010112, 3),
(36, 1010112, 3),
(37, 1010112, 2),
(38, 1010112, 1),
(39, 1010112, 1),
(40, 1010112, 1),
(1, 1010112, 1),
(342, 1010112, 2),
(248, 1010112, 1),
(226, 1010112, 3),
(228, 1010112, 1),
(310, 1010112, 2),
(116, 1010112, 2),
(84, 1010112, 1),
(343, 1010112, 1),
(97, 1010112, 1),
(46, 1010112, 1),
(15, 1010112, 1),
(344, 1010112, 1),
(274, 1010112, 1),
(345, 1010112, 1),
(346, 1010112, 1),
(199, 1010112, 1),
(347, 1010112, 1),
(340, 1010113, 2),
(30, 1010113, 4),
(32, 1010113, 3),
(33, 1010113, 3),
(53, 1010113, 1),
(246, 1010113, 1),
(101, 1010113, 4),
(4, 1010113, 22),
(5, 1010113, 20),
(26, 1010113, 17),
(16, 1010113, 17),
(27, 1010113, 7),
(18, 1010113, 2),
(23, 1010113, 2),
(20, 1010113, 2),
(44, 1010113, 1),
(9, 1010113, 1),
(10, 1010113, 2),
(41, 1010113, 1),
(42, 1010113, 1),
(34, 1010113, 1),
(84, 1010113, 1),
(348, 1010113, 1),
(97, 1010113, 1),
(46, 1010113, 1),
(15, 1010113, 1),
(226, 1010113, 2),
(228, 1010113, 1),
(310, 1010113, 2),
(116, 1010113, 2),
(237, 1010113, 9),
(238, 1010113, 6),
(349, 1010113, 1),
(350, 1010113, 1),
(351, 1010113, 1),
(342, 1010113, 1),
(345, 1010113, 1),
(224, 1010113, 1),
(199, 1010113, 1),
(347, 1010113, 1),
(246, 1010114, 3),
(41, 1010114, 3),
(2, 1010114, 1),
(295, 1010114, 2),
(340, 1010114, 1),
(332, 1010114, 1),
(254, 1010114, 1),
(101, 1010114, 3),
(30, 1010114, 7),
(263, 1010114, 1),
(264, 1010114, 4),
(46, 1010114, 3),
(10, 1010114, 2),
(91, 1010114, 1),
(352, 1010114, 1),
(53, 1010114, 1),
(353, 1010114, 1),
(224, 1010114, 3),
(250, 1010114, 2),
(251, 1010114, 2),
(4, 1010114, 16),
(5, 1010114, 22),
(16, 1010114, 20),
(17, 1010114, 1),
(3, 1010114, 4),
(15, 1010114, 4),
(230, 1010114, 1),
(18, 1010114, 2),
(23, 1010114, 2),
(20, 1010114, 3),
(27, 1010114, 3),
(26, 1010114, 5),
(226, 1010114, 6),
(228, 1010114, 3),
(354, 1010114, 1),
(355, 1010114, 1),
(97, 1010114, 1),
(356, 1010114, 1),
(32, 1010114, 1),
(33, 1010114, 1),
(227, 1010114, 1),
(357, 1010114, 2),
(96, 1010114, 1),
(143, 1010114, 2),
(21, 1010114, 1),
(237, 1010114, 6),
(238, 1010114, 4),
(358, 1010114, 1),
(291, 1010114, 1),
(22, 1010114, 1),
(109, 1010114, 1),
(359, 1010114, 1),
(360, 1010114, 1),
(258, 1010115, 2),
(10, 1010115, 3),
(41, 1010115, 2),
(9, 1010115, 1),
(233, 1010115, 2),
(30, 1010115, 2),
(28, 1010115, 1),
(101, 1010115, 1),
(11, 1010115, 1),
(12, 1010115, 1),
(4, 1010115, 5),
(13, 1010115, 1),
(5, 1010115, 11),
(361, 1010115, 1),
(230, 1010115, 1),
(362, 1010115, 1),
(363, 1010115, 1),
(263, 1010115, 1),
(264, 1010115, 1),
(46, 1010115, 1),
(18, 1010115, 2),
(23, 1010115, 2),
(16, 1010115, 6),
(20, 1010115, 2),
(226, 1010115, 1),
(228, 1010115, 1),
(237, 1010115, 3),
(238, 1010115, 2),
(17, 1010115, 2),
(27, 1010115, 1),
(364, 1010115, 1),
(234, 1010115, 1),
(29, 1010115, 1);

-- --------------------------------------------------------

--
-- Table structure for table `searchnotes`
--

CREATE TABLE IF NOT EXISTS `searchnotes` (
  `tokenID` int(10) unsigned NOT NULL,
  `noteID` int(10) unsigned NOT NULL,
  `count` int(10) unsigned NOT NULL,
  KEY `tokenID` (`tokenID`,`noteID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `searchnotes`
--

INSERT INTO `searchnotes` (`tokenID`, `noteID`, `count`) VALUES
(11, 1010101, 9),
(12, 1010101, 3),
(10, 1010101, 5),
(1, 1010101, 6),
(104, 1010101, 2),
(41, 1010101, 1),
(13, 1010101, 1),
(14, 1010101, 1),
(5, 1010101, 26),
(9, 1010101, 6),
(4, 1010101, 14),
(6, 1010101, 1),
(7, 1010101, 1),
(8, 1010101, 1),
(101, 1010101, 1),
(94, 1010101, 1),
(30, 1010101, 10),
(353, 1010101, 1),
(263, 1010101, 1),
(264, 1010101, 1),
(250, 1010101, 4),
(251, 1010101, 6),
(16, 1010101, 12),
(17, 1010101, 1),
(3, 1010101, 4),
(15, 1010101, 2),
(230, 1010101, 2),
(18, 1010101, 4),
(23, 1010101, 4),
(20, 1010101, 5),
(27, 1010101, 3),
(26, 1010101, 6),
(345, 1010101, 1),
(365, 1010101, 1),
(366, 1010101, 1),
(19, 1010101, 1),
(367, 1010101, 1),
(368, 1010101, 1),
(369, 1010101, 1),
(370, 1010101, 1),
(286, 1010101, 2),
(224, 1010101, 3),
(371, 1010101, 2),
(295, 1010101, 3),
(372, 1010101, 1),
(323, 1010101, 3),
(373, 1010101, 1),
(374, 1010101, 2),
(231, 1010101, 2),
(324, 1010101, 2),
(22, 1010101, 2),
(24, 1010101, 2),
(375, 1010101, 2),
(91, 1010101, 1),
(290, 1010101, 1),
(376, 1010101, 1),
(377, 1010101, 1),
(342, 1010101, 2),
(53, 1010101, 4),
(75, 1010101, 2),
(378, 1010101, 1),
(379, 1010101, 1),
(380, 1010101, 1),
(381, 1010101, 1),
(382, 1010101, 1),
(383, 1010101, 1),
(384, 1010101, 1),
(385, 1010101, 1),
(301, 1010101, 1),
(386, 1010101, 1),
(387, 1010101, 1),
(157, 1010101, 1),
(388, 1010101, 1),
(318, 1010101, 1),
(32, 1010101, 1),
(33, 1010101, 2),
(248, 1010101, 1),
(389, 1010101, 1),
(84, 1010101, 1),
(337, 1010101, 1),
(35, 1010101, 3),
(36, 1010101, 3),
(37, 1010101, 2),
(38, 1010101, 1),
(39, 1010101, 1);

-- --------------------------------------------------------

--
-- Table structure for table `searchprereqs`
--

CREATE TABLE IF NOT EXISTS `searchprereqs` (
  `tokenID` int(10) unsigned NOT NULL,
  `prereqID` int(10) unsigned NOT NULL,
  `count` int(10) unsigned NOT NULL,
  KEY `tokenID` (`tokenID`,`prereqID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `searchquestions`
--

CREATE TABLE IF NOT EXISTS `searchquestions` (
  `tokenID` int(10) unsigned NOT NULL,
  `questionID` int(10) unsigned NOT NULL,
  `count` int(10) unsigned NOT NULL,
  KEY `tokenID` (`tokenID`,`questionID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- --------------------------------------------------------

--
-- Table structure for table `searchtokens`
--

CREATE TABLE IF NOT EXISTS `searchtokens` (
  `tokenID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `token` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `count` int(10) unsigned NOT NULL,
  PRIMARY KEY (`tokenID`),
  KEY `token` (`token`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=390 ;

--
-- Dumping data for table `searchtokens`
--

INSERT INTO `searchtokens` (`tokenID`, `token`, `count`) VALUES
(1, 'i', 202),
(2, 'definition', 35),
(3, 'if', 65),
(4, 'd', 223),
(5, 'x', 478),
(6, 'rightarrow', 13),
(7, 'mathbb', 37),
(8, 'r', 61),
(9, 'is', 121),
(10, 'a', 324),
(11, 'distance', 27),
(12, 'function', 34),
(13, 'on', 73),
(14, 'set', 47),
(15, 'and', 78),
(16, 'y', 282),
(17, '0', 80),
(18, 'for', 75),
(19, 'some', 5),
(20, 'in', 107),
(21, 'then', 47),
(22, 'are', 13),
(23, 'all', 67),
(24, 'equal', 9),
(25, 'equals', 1),
(26, 'z', 114),
(27, 'leq', 69),
(28, 'proposition', 3),
(29, 'geq', 5),
(30, 'the', 118),
(31, 'generalized', 11),
(32, 'triangle', 22),
(33, 'inequality', 24),
(34, 'states', 4),
(35, '1', 57),
(36, 'n', 24),
(37, '2', 46),
(38, '3', 8),
(39, 'cdots', 6),
(40, 'each', 10),
(41, 'metric', 66),
(42, 'space', 33),
(43, 'pair', 1),
(44, 'where', 13),
(45, 'subspace', 6),
(46, 'of', 53),
(47, 'subset', 3),
(48, 'subseteq', 9),
(49, 'together', 6),
(50, 'with', 10),
(51, 'restriction', 3),
(52, 'tilde', 11),
(53, 'to', 32),
(54, 'example', 6),
(55, 'real', 16),
(56, 'line', 5),
(57, 'usual', 3),
(58, 'forms', 5),
(59, 'plane', 2),
(60, 'standard', 1),
(61, 'sqrt', 14),
(62, 'taxicab', 1),
(63, 'sequence', 5),
(64, 'l', 7),
(65, 'infty', 7),
(66, 'consisting', 5),
(67, 'bounded', 8),
(68, 'sequences', 2),
(69, 'complex', 2),
(70, 'numbers', 2),
(71, 'mathrm', 8),
(72, 'sup', 7),
(73, 'ldots', 7),
(74, 'c', 21),
(75, 'b', 79),
(76, 'continuous', 2),
(77, 'valued', 3),
(78, 'functions', 4),
(79, 'defined', 5),
(80, 'max', 1),
(81, 't', 40),
(82, 'discrete', 6),
(83, 'any', 6),
(84, 'by', 12),
(85, 'when', 1),
(86, 'otherwise', 3),
(87, 'binary', 8),
(88, 'relation', 8),
(89, 'reflexive', 3),
(90, 'said', 10),
(91, 'be', 25),
(92, 'partial', 6),
(93, 'ordering', 3),
(94, 'satisfies', 10),
(95, 'antisymmetric', 3),
(96, 'imply', 9),
(97, 'order', 8),
(98, 'transitive', 3),
(99, 'partially', 11),
(100, 'ordered', 14),
(101, 'that', 68),
(102, 'elements', 2),
(103, 'comparable', 4),
(104, 'or', 17),
(105, 'totally', 2),
(106, 'chain', 4),
(107, 'such', 19),
(108, 'property', 1),
(109, 'an', 11),
(110, 'upper', 4),
(111, 'bound', 4),
(112, 'element', 7),
(113, 'm', 12),
(114, 'there', 7),
(115, 'maximal', 4),
(116, 'implies', 7),
(117, 'zorn', 2),
(118, 's', 4),
(119, 'lemma', 2),
(120, 'neq', 10),
(121, 'emptyset', 2),
(122, 'every', 6),
(123, 'has', 7),
(124, 'hamel', 2),
(125, 'basis', 2),
(126, 'vector', 7),
(127, 'nonempty', 2),
(128, 'total', 2),
(129, 'orthonormal', 2),
(130, 'hilbert', 3),
(131, 'contains', 1),
(132, 'subadditive', 5),
(133, 'f', 50),
(134, 'positive', 5),
(135, 'homogeneous', 3),
(136, 'alpha', 9),
(137, 'sublinear', 4),
(138, 'functional', 15),
(139, 'homogenous', 1),
(140, 'hahn', 6),
(141, 'banach', 8),
(142, 'theorem', 11),
(143, 'let', 12),
(144, 'p', 11),
(145, 'linear', 16),
(146, 'extension', 5),
(147, 'satisfying', 1),
(148, 'scalar', 1),
(149, 'normed', 7),
(150, 'spaces', 9),
(151, 'lvert', 25),
(152, 'rvert', 25),
(153, 'nonzero', 4),
(154, 'corollary', 1),
(155, 'since', 16),
(156, 'norm', 1),
(157, 'it', 10),
(158, 'follows', 3),
(159, 'backslash', 1),
(160, 'introductory', 5),
(161, 'analysis', 4),
(162, 'operators', 2),
(163, 'baire', 1),
(164, 'category', 1),
(165, 'fixed', 1),
(166, 'point', 2),
(167, 'applications', 2),
(168, 'open', 1),
(169, 'mapping', 2),
(170, 'closed', 1),
(171, 'graph', 1),
(172, 'gateaux', 1),
(173, 'frechet', 1),
(174, 'limits', 1),
(175, 'differentiation', 2),
(176, 'riemann', 2),
(177, 'integrals', 2),
(178, 'stieltjes', 1),
(179, 'calculus', 1),
(180, 'contraction', 1),
(181, 'inverse', 1),
(182, 'implicit', 1),
(183, 'algebra', 1),
(184, 'subspaces', 1),
(185, 'transformations', 1),
(186, 'matrices', 3),
(187, 'eigenvalues', 1),
(188, 'eigenvectors', 1),
(189, 'jordan', 1),
(190, 'definite', 1),
(191, 'bilinear', 1),
(192, 'quadratic', 1),
(193, 'numerical', 2),
(194, 'coding', 1),
(195, 'fundamentals', 1),
(196, 'computer', 1),
(197, 'arithmetic', 1),
(198, 'nonlinear', 1),
(199, 'equations', 3),
(200, 'polynomial', 1),
(201, 'interpolation', 1),
(202, 'divided', 1),
(203, 'differences', 1),
(204, 'splines', 1),
(205, 'curve', 1),
(206, 'fitting', 1),
(207, 'least', 1),
(208, 'squares', 1),
(209, 'method', 1),
(210, 'integration', 1),
(211, 'ii', 1),
(212, 'topological', 1),
(213, 'distribution', 1),
(214, 'fourier', 1),
(215, 'transform', 1),
(216, 'measure', 1),
(217, 'theory', 1),
(218, 'find', 5),
(219, 'metrics', 6),
(220, 'small', 1),
(221, 'sets', 1),
(222, 'single', 1),
(223, 'exactly', 1),
(224, 'two', 9),
(225, 'points', 1),
(226, 'we', 37),
(227, 'must', 16),
(228, 'have', 24),
(229, 'so', 16),
(230, 'only', 8),
(231, 'zero', 7),
(232, 'also', 2),
(233, 'nonnegative', 5),
(234, 'thus', 6),
(235, 'take', 1),
(236, 'form', 1),
(237, 'br', 82),
(238, 'center', 54),
(239, 'left', 4),
(240, 'begin', 6),
(241, 'array', 12),
(242, 'll', 2),
(243, 'end', 6),
(244, 'right', 4),
(245, 'number', 3),
(246, 'show', 15),
(247, 'check', 4),
(248, 'this', 8),
(249, 'fact', 1),
(250, 'ul', 18),
(251, 'li', 26),
(252, 'pm', 1),
(253, 'rcl', 4),
(254, 'axioms', 2),
(255, 'satisfied', 2),
(256, 'does', 3),
(257, 'define', 1),
(258, 'prove', 6),
(259, 'why', 2),
(260, 'fails', 2),
(261, 'need', 1),
(262, 'whether', 3),
(263, 'three', 9),
(264, 'conditions', 13),
(265, 'suppose', 2),
(266, '4', 1),
(267, 'but', 1),
(268, 'not', 7),
(269, 'hold', 1),
(270, 'verify', 3),
(271, 'taking', 2),
(272, 'square', 1),
(273, 'root', 1),
(274, 'both', 4),
(275, 'sides', 2),
(276, 'because', 1),
(277, 'additive', 1),
(278, 'multiplicative', 1),
(279, 'constants', 1),
(280, 'keep', 1),
(281, 'k', 33),
(282, 'kd', 3),
(283, 'second', 1),
(284, 'condition', 2),
(285, 'imposes', 1),
(286, 'no', 4),
(287, 'further', 2),
(288, 'finally', 1),
(289, 'third', 1),
(290, 'places', 2),
(291, 'therefore', 4),
(292, 'greater', 1),
(293, 'than', 2),
(294, 'one', 2),
(295, 'can', 6),
(296, 'supremum', 1),
(297, 'induced', 3),
(298, 'what', 1),
(299, 'zeros', 2),
(300, 'ones', 2),
(301, 'either', 8),
(302, 'times', 3),
(303, 'int', 11),
(304, 'dt', 11),
(305, 'integrand', 2),
(306, 'identically', 1),
(307, 'linearity', 1),
(308, 'integral', 1),
(309, 'operator', 1),
(310, 'which', 5),
(311, 'trivially', 1),
(312, 'trivial', 1),
(313, 'reduces', 1),
(314, 'indeed', 1),
(315, 'hamming', 2),
(316, 'triples', 1),
(317, 'components', 2),
(318, 'called', 2),
(319, 'e', 1),
(320, 'component', 11),
(321, 'negation', 1),
(322, 'change', 1),
(323, 'same', 6),
(324, 'they', 4),
(325, 'contributes', 2),
(326, 'toward', 2),
(327, 'sum', 3),
(328, 'contributed', 1),
(329, 'sums', 1),
(330, 'contribution', 2),
(331, 'side', 2),
(332, 'less', 2),
(333, 'corresponding', 1),
(334, 'holds', 4),
(335, 'inquality', 1),
(336, 'proceed', 1),
(337, 'induction', 3),
(338, 'case', 1),
(339, 'value', 1),
(340, 'use', 5),
(341, 'w', 14),
(342, 'from', 5),
(343, 'switching', 1),
(344, 'get', 1),
(345, 'these', 3),
(346, 'implied', 1),
(347, 'conclude', 2),
(348, 'rearranging', 1),
(349, 'different', 1),
(350, 'arrangement', 1),
(351, 'yields', 1),
(352, 'reduced', 1),
(353, 'following', 2),
(354, 'slightly', 1),
(355, 'changed', 1),
(356, 'terms', 1),
(357, 'given', 2),
(358, 'switch', 1),
(359, 'equivalent', 1),
(360, 'defintion', 1),
(361, 'assumes', 1),
(362, 'values', 1),
(363, 'using', 1),
(364, '2d', 1),
(365, 'properties', 1),
(366, 'formalize', 1),
(367, 'basic', 1),
(368, 'intuitive', 1),
(369, 'notions', 1),
(370, 'about', 1),
(371, 'objects', 2),
(372, 'occupy', 1),
(373, 'spot', 1),
(374, 'their', 2),
(375, 'object', 2),
(376, 'at', 1),
(377, 'once', 1),
(378, 'as', 1),
(379, 'between', 1),
(380, 'along', 1),
(381, 'shortest', 1),
(382, 'path', 1),
(383, 'going', 1),
(384, 'another', 1),
(385, 'first', 1),
(386, 'maintain', 1),
(387, 'increase', 1),
(388, 'statement', 1),
(389, 'generalizes', 1);

-- --------------------------------------------------------

--
-- Table structure for table `sectionnotes`
--

CREATE TABLE IF NOT EXISTS `sectionnotes` (
  `sectionID` int(10) unsigned NOT NULL,
  `noteID` int(10) unsigned NOT NULL,
  KEY `sectionID` (`sectionID`,`noteID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `sectionnotes`
--

INSERT INTO `sectionnotes` (`sectionID`, `noteID`) VALUES
(1010100, 1010101),
(1010100, 1010102);

-- --------------------------------------------------------

--
-- Table structure for table `sections`
--

CREATE TABLE IF NOT EXISTS `sections` (
  `sectionID` int(10) unsigned NOT NULL,
  `courseID` int(10) unsigned NOT NULL,
  `sectionName` varchar(128) COLLATE utf8_unicode_ci NOT NULL,
  KEY `sectionID` (`sectionID`,`courseID`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `sections`
--

INSERT INTO `sections` (`sectionID`, `courseID`, `sectionName`) VALUES
(1010100, 1, 'Metric Spaces');

-- --------------------------------------------------------

--
-- Table structure for table `userconcepts`
--

CREATE TABLE IF NOT EXISTS `userconcepts` (
  `userID` int(10) unsigned NOT NULL,
  `conceptID` int(10) unsigned NOT NULL,
  `strength` float NOT NULL,
  `lastSeen` bigint(20) unsigned NOT NULL,
  `nextReview` bigint(20) unsigned NOT NULL,
  KEY `userID` (`userID`,`conceptID`,`nextReview`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `userconcepts`
--

INSERT INTO `userconcepts` (`userID`, `conceptID`, `strength`, `lastSeen`, `nextReview`) VALUES
(1, 1040101, 1.35926e+08, 1373547932, 1387869139),
(1, 1040102, 1.3682e+08, 1373547944, 1387963373),
(1, 1040103, 2.10007e+08, 1376397847, 1398524281),
(1, 1040104, 2.11582e+08, 1376397864, 1398690242),
(1, 1040105, 2.12872e+08, 1376397911, 1398826250),
(1, 1040106, 1.84172e+08, 1375117890, 1394522351),
(1, 1040107, 1.83552e+08, 1375117869, 1394456955),
(1, 1040108, 1.4717e+08, 1373894515, 1389400430),
(1, 1040109, 3.94358e+08, 1390928252, 1432478034),
(1, 1040110, 1.8271e+08, 1375117963, 1394368367),
(1, 1040111, 1.58158e+08, 1373895127, 1390558704),
(1, 1040112, 1.57977e+08, 1373895085, 1390539655),
(1, 1040114, 1.5455e+08, 1373894874, 1390178345),
(1, 1040116, 1.55713e+08, 1373895007, 1390301011),
(1, 1040113, 1.54368e+08, 1373894839, 1390159152),
(1, 1040115, 1.49574e+08, 1373894715, 1389653888),
(1, 1040117, 1.49351e+08, 1373894671, 1389630367),
(1, 1040118, 1.52007e+08, 1373894820, 1389910319),
(1, 1040119, 2.65975e+08, 1392400595, 1420423842),
(1, 1040120, 1.34896e+08, 1373548125, 1387760844),
(1, 1040121, 1.19693e+08, 1375117929, 1387728863),
(1, 1040122, 1.40439e+08, 1373894385, 1388691117),
(4, 1040105, 312299, 1376780306, 1376813210),
(4, 1040116, 937457, 1376681088, 1376779859),
(5, 1040116, 614.243, 1364763256, 1364763321),
(5, 1040105, 633.112, 1364763269, 1364763336),
(5, 1040103, 173.783, 1364763263, 1364763281),
(8, 1040101, 8534.88, 1366074484, 1366075383),
(8, 1040108, 6243.63, 1366074740, 1366075398),
(8, 1040103, 341.117, 1366074666, 1366074702),
(8, 1040104, 346.138, 1366074721, 1366074757),
(1, 1010103, 3.01167e+08, 1385997812, 1417728942),
(1, 1010104, 3.01986e+08, 1385997847, 1417815213),
(1, 1010105, 2.98746e+08, 1385997759, 1417473798),
(1, 1010102, 2.90503e+08, 1385997701, 1416605261),
(1, 1010101, 2.90381e+08, 1385997688, 1416592388),
(1, 1010106, 2.24911e+08, 1381672588, 1405369324),
(1, 1010112, 2.64276e+08, 1385155623, 1412999893),
(1, 1010107, 2.90696e+08, 1385997726, 1416625656),
(1, 1010109, 2.1625e+08, 1381672577, 1404456785),
(1, 1010110, 1.9649e+07, 1385155578, 1387225808),
(1, 1010111, 1.9257e+08, 1380488255, 1400777497),
(1, 1010108, 1.63565e+08, 1379608729, 1396842013),
(1, 1010113, 2.80245e+08, 1385997668, 1415524386),
(6, 1040108, 36, 1369335843, 1369335847),
(11, 1010103, 318.37, 1376681050, 1376681084),
(11, 1010105, 255.301, 1376681098, 1376681125),
(11, 1040116, 36, 1376681091, 1376681095),
(13, 1010103, 6307.25, 1381681090, 1381681755),
(13, 1040101, 6475.47, 1381681060, 1381681742),
(14, 1010103, 1, 1382313914, 1382313914);

-- --------------------------------------------------------

--
-- Table structure for table `usercourses`
--

CREATE TABLE IF NOT EXISTS `usercourses` (
  `userID` int(10) unsigned NOT NULL,
  `courseID` int(10) unsigned NOT NULL,
  KEY `userID` (`userID`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `userexercises`
--

CREATE TABLE IF NOT EXISTS `userexercises` (
  `userID` int(10) unsigned NOT NULL,
  `exerciseID` int(10) unsigned NOT NULL,
  `strength` float NOT NULL,
  `lastSeen` bigint(20) NOT NULL,
  `nextReview` bigint(20) NOT NULL,
  KEY `userID` (`userID`,`exerciseID`,`nextReview`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

--
-- Dumping data for table `userexercises`
--

INSERT INTO `userexercises` (`userID`, `exerciseID`, `strength`, `lastSeen`, `nextReview`) VALUES
(1, 1010101, 820041, 1380488340, 1380574740),
(1, 1010102, 820041, 1380488368, 1380574768),
(1, 1010103, 820041, 1380488451, 1380574851);

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `userID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `userName` varchar(32) NOT NULL,
  `email` varchar(254) NOT NULL,
  `password` char(64) NOT NULL,
  `cookiePassword` char(64) NOT NULL,
  `recoverPassword` char(64) NOT NULL,
  `recoverExpiration` bigint(20) unsigned NOT NULL,
  PRIMARY KEY (`userID`),
  KEY `userName` (`userName`,`email`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=16 ;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`userID`, `userName`, `email`, `password`, `cookiePassword`, `recoverPassword`, `recoverExpiration`) VALUES
(1, 'root', 'feedback@mathoverload.net', '9db3edcd2904b0d13ec638f1b42674bba5bee9299127ad31783132dd0b13a95c', 'nO1mhpZm7NtFgXpohVgnBbgYjpY2ZYlDndqLIGxGTgL041ecNAFPcmnBSC4sbgwF', 'v7D8ECGaepw62T8A34P39wL0kFue1usnsvlxysNSXAOQTNQMIgGHSR83XsXPdG2L', 1364071813),
(2, 'testes', 'wavefunction@fastmail.fm', '9db3edcd2904b0d13ec638f1b42674bba5bee9299127ad31783132dd0b13a95c', 'UGeZcSNlyqV6u9UUqVcJnLHECdz6Uebpk6EDORpC7A8sATCqpe0Sp7XsbMpvrHbR', 'DfVRxAUvBTdBmfsRAikqg8Y7KEt2LKKOqfgef1PgKsixOQFPzq5VoUTzYCrkN1y4', 1364075118),
(3, 'julianngavin', 'juliann.gavin@gmail.com', '589685ca8bd548b1ec63eb16be097c6a74206e0d443200513add53084069eb5b', 'wh8vrPKbBvKNsaPTKed6wRMFpDEeaS1Nzz8hFJ8H5IVnjl7tFaq1s27Y6B2WTtjJ', 'jiqprowmxIQWtNFynwqWooukpn79WhI6FzlweYYRgonP1tEffv1KZlvEOsDlPMhU', 1364482790),
(4, 'trest', 'email', '9db3edcd2904b0d13ec638f1b42674bba5bee9299127ad31783132dd0b13a95c', 'OEbB98AS5oQITqJgcbyPH1qkZmXr098EEZFEXGWSumbETllvCZBKRsuqVHXLHWPL', 'Rqkw0zhk5PInegADdDUMVtelnBabjyJ1etnUiL4dbCH5jH8CLSOhCtIqvjHVXRM1', 1364659631),
(5, 'newtest', 'email', '9db3edcd2904b0d13ec638f1b42674bba5bee9299127ad31783132dd0b13a95c', 'RPTDL35KWKvDCXusMho6C7DY4N7IYFfpUzsgsorFzcJ204kCbP9eMD2HQ0Po5vUQ', 'kDxTseZh6iZwd9z4OyYb1RjHHzwCkGTKJGd1k2YhbxU5xJzC7OdygD6o2sqcy9n8', 1364763076),
(6, 'newertest', 'email', '9db3edcd2904b0d13ec638f1b42674bba5bee9299127ad31783132dd0b13a95c', 'PsEhS9mCWf3uhHxs2GiNzW0ezJwQgLLv3PSMP5PlaJV8QJqIQPVFlLjbVWs1i3nc', '3DQXRTjkulOH26aTtJo9Zbra75xn3ZwxcCKuVuUGWjOOfohPyMPNo6ol1bOv0AiT', 1364763409),
(7, 'thm43608', 'tyler.clark@knights.ucf.edu', '5643b1ee6e923556b4d1987a2541f3d2b566091423c38a6311d869b03f3b4706', 'ysGTswSaLqL4Bak126bItlHheHf9ovZddgwMTEneuyYwP9nH5EPoqXMKerKJdkm6', 'GYIadw5NkUAzTn7OsN2ZkFkFxuOQU0MbPV1sHw6sG6hZkfoTshsTmTYZDmpYd2zs', 1365827991),
(8, 'test2', 'email', '9db3edcd2904b0d13ec638f1b42674bba5bee9299127ad31783132dd0b13a95c', 'PtYzYaNtOXBZwNgfZDgzGunYp6O7gIVw1tlQKy9YMBy9OUfoYBdewH2bEGZlPuXH', 'd8XoxXDAY19nLfRjguES27t6EJhT34aX2yBqLEqk5qOHLfrrQwAItuEx3mGwghKZ', 1365828129),
(9, 'newdest', 'email', '9db3edcd2904b0d13ec638f1b42674bba5bee9299127ad31783132dd0b13a95c', 'HYWl8BWwAOkfFGp4NsSDLlufKK5wAE5HdRscSFPTT0yY6eSKNlOYM83WJyJJ3EQX', 'pc2frMUbRNUGAf9rp8m1jsa301QtEDZugRPNejpvx91xe0fKyHCYzcSqUiZZmzJI', 1368486999),
(10, 'DaveUM', 'dyerdm0147@gmail.com', 'cdf44c0a45bf74e2941dd7aacb1fab467a2bf7d6a54677051b1c960080984680', '26MhukiUsxePnjYM8t3LwMZADTES3jwwf8TQi1kRpEhSn6fmpYyblObphg7aFtNl', 'jzlBeWWoWvvNjZm5lsULGxtnBKgp0YqaOSbtoyXBjIOJh0FIjZUqMDTON03EPked', 1373471563),
(11, 'York', 'ayork13@gmail.com', 'a0ad0ff7feede54116be6926c4ac11999bd325d741de22d7808bb4fb809d92ca', 'yo43sWDLh2Xi33uh0J3g9DoUR5ibHPv53qylC1wkuKJnD4L3DEaDIEXZA50HLmDE', 'jPrfZcF1EZtqt0KTKnbNstawbfEJ254cKm7kFDbJdLzMBAfLn6YWqzJHVORNJLqU', 1376680850),
(12, 'porcospino289', 'ganong@yorku.ca', '620a1fdffebcf1412e9957f5303da7bc90f5d0cb3319ac4a95f53c72c69ddb04', 'VL7PwDzzObjZhffHzcflghwOp9hX5VDRhBgUEWJTxtsVOOcDr8pOfbdLaAjWWnn4', '6Ys0TdNyqcGBr8eL6dX0ycGnYoGDjjrg8aXR3kFkCLluKG5GjT7YwDBKsINSr5yq', 1378786634),
(13, 'newone', 'email', '9db3edcd2904b0d13ec638f1b42674bba5bee9299127ad31783132dd0b13a95c', 'En7aYTU9HO5jTlb1p0fkpi5SOzmN4ip8LmYj6tjD8emRGDJv4pVkNR2cGfqBDVAP', 'DFgpfHMdtLotWvq0v5An0V4WrbfpW8SaDyGi6TCpfrZ1cGrOBr11DwNuNsakqsAu', 1380488583),
(14, 'avonmizener', 'anncanfly@yahoo.com', '1c73e6117f26cc32eeeb47fd52bf8e6d725a8242ca765ec308885346a4ee21df', 'umVZ1lY4VxxpFCRABOAfsi19urOf8Wlt86I0ihu4UhkZj2ZkGaGz88ysqCNoYzXX', 'wgOVD8PYgzxFrNqynxnmvcVbfiG4XeRKAgfEeucAkQGSexGIkuuWMFyro4lCZ3Ma', 1382313885),
(15, 'fjohn', 'email@fjohn.com', '5104f09655158cc9a729755be6c7f16f57d443d8d7f1358249ab65db2a4ae931', 'ZxRrxEstHQtTPax1quLYUiz2a3uYKiBjVSQJX83fPmzfDmWtWiHrH7kh1U5B27kO', 'P1YnzRJF48k7l6r8eyqmvQJnkEodBOrRFG55XEASDlPoh7nCvTohjyKK3zn5DVMJ', 1390874119);

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
